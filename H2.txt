** 스프링에서 내장형 H2 사용할 때, 브라우저를 통해 H2 콘솔에 접속하는 방법
application.properties에 아래 내용 추가
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console
'h2-console' 이 부분은 원하는대로 지정.
앱 실행하고 브라우저에서 localhost:8080/h2-console 로 접속하면 된다.


application.yml 사용할 경우

# 브라우저 콘솔에서 사용할 h2 이름 등 설정. 
spring:
  datasource:
    url: jdbc:h2:mem:testdb
    driver-class-name: org.h2.Driver
    username: sa
    password:

# 브라우저에서 h2 콘솔 사용할 수 있도록
  h2:
    console:
      enabled: true



실행파일 경로
C:\h2-2023-09-17\h2\bin

Version 2.2.224 (2023-09-17)

사용자명 : sa
비밀번호 : (없음)

H2 데이터베이스 설치
개발이나 테스트 용도로 가볍고 편리한 DB, 웹 화면 제공
https://www.h2database.com


다운로드 및 설치
h2 데이터베이스 버전은 스프링 부트 버전에 맞춘다.

권한 주기: `chmod 755 h2.sh` **(윈도우 사용자는 x)**

실행: `./h2.sh` **(윈도우 사용자는 h2.bat)**

데이터베이스 파일 생성 방법
jdbc:h2:~/test (최초 한번)
~/test.mv.db 파일 생성 확인

이후부터는 jdbc:h2:tcp://localhost/~/test 이렇게 접속


** 테스트 케이스 전용 DB 만들기 

이름 : jdbc:h2:~/testcase
1.  브라우저에 jdbc:h2:tcp://localhost/~/test 콘솔 창 켜두기
2. h2 종료
2. 주소창에서 "~~~:8082/login.do" 에서 ~~~ 부분을 localhost로 바꾸기
3. h2 시작
4. 2의 창에서 엔터 누르면 로그인 창으로 이동함
5. JDBC URL에 jdbc:h2:~/testcase 입력
6. 연결 
7. 이후
jdbc:h2:tcp://localhost/~/testcase
로 접속


**h2 데이터베이스 버전은 스프링 부트 버전에 맞춘다.**
스프링 부트 2.x를 사용하면 **1.4.200 버전**을 다운로드 받으면 된다.
스프링 부트 3.x를 사용하면 **2.1.214 버전 이상** 사용해야 한다.
다음 링크에 가면 다양한 H2 다운로드 버전을 확인할 수 있다.
https://www.h2database.com/html/download-archive.html


drop table if exists member CASCADE;
create table member
(
id bigint generated by default as identity,
name varchar(255),
primary key (id)
);

* 임베디드 모드로 접속:
H2 콘솔 브라우저 창에서 "Generic H2 (Embedded)"를 선택하고, 데이터베이스 URL을 jdbc:h2:~/test 또는 jdbc:h2:mem:testdb로 설정.


TCP 서버 모드로 접속:
H2 콘솔 브라우저 창에서 "Generic H2 (Server)"를 선택하고, 데이터베이스 URL을 jdbc:h2:tcp://localhost:9092/~/test로 설정.
H2 서버가 TCP 모드로 실행 중이어야 함.


* cmd 창에서 H2 데이터베이스 서버를 실행하고 있는 경우, 해당 cmd 창을 종료하면 H2 데이터베이스 서버도 종료됨.
cmd 창에서 실행된 프로세스가 해당 창에 종속되기 때문.




** 테스트 환경에서 데이터베이스 분리와 초기화

1. 원인: 테스트와 데이터베이스 상태 관리
Spring Boot는 테스트 환경에서 기본적으로 H2 메모리 데이터베이스를 사용하며, 다음과 같은 특징을 갖는다

H2 메모리 모드(jdbc:h2:mem):
테스트 실행 시 데이터베이스를 메모리에서 생성하며, 테스트 클래스 실행이 종료되면 데이터베이스가 삭제된다.
테스트 클래스 단위로 데이터베이스를 생성하므로, 같은 클래스 내의 여러 테스트 메서드는 같은 데이터베이스를 공유한다.

Spring 컨텍스트 캐싱:
Spring Boot는 테스트 성능 최적화를 위해 애플리케이션 컨텍스트를 캐싱한다.
컨텍스트 캐싱이 활성화된 경우, H2 데이터베이스도 재사용될 수 있다.
이로 인해, 이전 테스트에서 사용된 AUTO_INCREMENT 상태와 데이터베이스 스키마가 유지될 가능성이 있다.


2. 결과: 데이터베이스 상태 관리 실패로 인한 문제
테스트 간 데이터베이스 상태가 공유되거나 초기화되지 않는 경우, 다음과 같은 문제가 발생할 수 있다:

테스트 독립성 훼손:
이전 테스트에서 남은 데이터가 다음 테스트 결과에 영향을 미침.
예: AUTO_INCREMENT 값이 초기화되지 않아, 새로운 데이터의 ID 값이 예상과 다를 수 있음.

상태 불일치 문제:
데이터베이스가 비정상적인 상태로 변경되어, 테스트 간의 의도와 실제 데이터 상태가 불일치.


3. 해결 방법: 데이터베이스 분리와 초기화

3.1 데이터베이스 분리
테스트 클래스 간 데이터베이스를 독립적으로 유지하려면, 아래 방법을 활용한다:

a. 고유한 데이터베이스 인스턴스 생성: application.yml 또는 application.properties에서 데이터베이스 URL에 고유 값을 부여하여 테스트 간 격리.

spring:
  datasource:
    url: jdbc:h2:mem:${random.uuid}
    driver-class-name: org.h2.Driver
    username: sa
    password:

b. 컨텍스트 재사용 방지: @DirtiesContext를 사용하여 테스트 클래스 실행 후 컨텍스트를 초기화.

3.2 데이터베이스 초기화
같은 테스트 클래스 내의 테스트 메서드 간 데이터 간섭을 방지하려면, 아래 방법을 활용한다:

a. @BeforeEach 또는 @AfterEach에서 데이터 정리: 테스트 실행 전후 데이터베이스 상태를 초기화하여 독립성을 유지.

@BeforeEach
public void resetAutoIncrement() {
    blogRepository.deleteAll();
    entityManager.createNativeQuery("ALTER TABLE article ALTER COLUMN id RESTART WITH 1").executeUpdate();
}

b. @Transactional로 데이터 롤백:

각 테스트 메서드 종료 시 트랜잭션 롤백을 통해 데이터베이스 상태를 복구.

@Transactional
@SpringBootTest
public class MyBlogApiControllerTest {
    // 테스트 코드
}

c. 데이터베이스 상태 초기화 스크립트 사용: SQL 스크립트를 활용하여 데이터 삭제 및 상태 초기화.

@Sql(scripts = "/reset-database.sql", executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD)


4. 정리
테스트 환경에서 데이터베이스 상태 관리의 핵심 사항

H2 메모리 데이터베이스와 Spring Boot 테스트:
테스트 클래스 실행 시 데이터베이스가 생성되며, 실행 종료 시 삭제된다.
그러나, Spring 컨텍스트 캐싱이 활성화된 경우 데이터베이스 상태가 유지될 수 있다.

데이터베이스 상태 초기화:
테스트 간 데이터 간섭을 방지하려면, 데이터 삭제뿐 아니라 AUTO_INCREMENT 상태를 초기화하거나 새로운 데이터베이스 인스턴스를 생성해야 한다.

해결 방법:
컨텍스트 초기화: @DirtiesContext를 사용하여 컨텍스트를 강제로 초기화.
테스트 간 데이터베이스 분리: 고유한 데이터베이스 인스턴스를 생성.
데이터 초기화: @Transactional, @BeforeEach, 또는 SQL 스크립트로 데이터베이스 상태를 복구.
