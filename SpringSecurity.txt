** 스프링 시큐리티

1. 개요
스프링 시큐리티는 애플리케이션의 보안을 담당하는 프레임워크로, 인증(Authentication)과 인가(Authorization)를 주요 기능으로 제공한다.
이러한 기능은 서블릿 필터 체인(Servlet Filter Chain)을 통해 구현되며, 클라이언트의 요청이 애플리케이션에 도달하기 전에 보안 검사를 수행한다.
각 필터를 설정하는데 필요한 빈은 별도로 작성하여 등록한다.


2. 특징

보안 기능의 포괄성:
인증, 인가, CSRF 보호, 세션 관리, 암호화 등 다양한 보안 기능을 지원.

확장성:
기본 제공 기능을 커스터마이징 가능.

플러그인 기반 아키텍처:
보안 규칙을 필터 체인(SecurityFilterChain)으로 구현하여 유연하게 관리.


3. 동작 원리
스프링 시큐리티의 필터 체인은 DelegatingFilterProxy (deletage :  대리자, 위임하다) 를 통해 동작하며, 이는 스프링 애플리케이션 컨텍스트에서 정의된 보안 필터들을 위임받아 처리한다.
이러한 필터들은 인증, 인가, CSRF 보호, 세션 관리 등 다양한 보안 기능을 수행하며, 보안 검사를 통과한 요청만이 디스패처 서블릿(DispatcherServlet)으로 전달되어 실제 애플리케이션 로직이 처리된다.

1) 모든 HTTP 요청은 Servlet Filter Chain에서 스프링 시큐리티의 DelegatingFilterProxy를 거치며, SecurityFilterChain이 요청을 보안 규칙에 따라 처리.
2) 인증, 인가, CSRF 보호 등의 검사를 거쳐 요청이 안전하다고 판단되면 DispatcherServlet으로 전달.
2-1) 보안 규칙에 어긋나는 요청은 차단되거나 오류를 반환.


예시) 가장 보편적인 @Configuration과 @EnableWebSecurity를 이용한 설정

@Configuration과 @EnableWebSecurity가 선언된 시큐리티 컨피규레이션 클래스에서 보안 규칙(인증, 권한, CSRF 등)을 정의한다.
이 설정을 바탕으로 필터 체인(SecurityFilterChain)이 Bean으로 등록, 생성된다.
HTTP 요청은 필터 체인을 통해 보안 검사를 받는다.
요청이 보안 규칙에 적합하면 디스패처 서블릿으로 전달된다.
그렇지 않으면 요청이 차단(반려)된다.




** SecurityFilterChain
스프링 시큐리티에서 SecurityFilterChain은 HTTP 요청을 처리하는 보안 필터들의 집합으로, 요청에 대해 인증, 인가, CSRF 보호 등의 보안 규칙을 적용.

생성 과정 요약
DelegatingFilterProxy 등록:
스프링 부트가 DelegatingFilterProxy를 서블릿 필터로 등록.

SecurityFilterChain 설정:
개발자는 HttpSecurity를 사용하여 보안 규칙을 설정하고 SecurityFilterChain 빈을 정의.

SecurityFilterChain 생성:
HttpSecurity.build() 호출로 설정된 규칙에 따라 SecurityFilterChain 객체 생성.

SecurityFilterChain 실행:
DelegatingFilterProxy가 SecurityFilterChain을 호출하며, 요청은 체인의 각 필터를 순차적으로 통과.

요청 처리:
보안 검사를 통과한 요청만 컨트롤러로 전달.


1. 스프링 시큐리티 초기화

1-1. DelegatingFilterProxy 등록:
스프링 부트가 애플리케이션을 초기화할 때, 서블릿 컨테이너에 DelegatingFilterProxy를 등록.
DelegatingFilterProxy는 스프링 컨텍스트에 정의된 SecurityFilterChain을 호출하는 역할.

1-2. SecurityFilterChain 등록 준비:
스프링 컨테이너는 개발자가 작성한 @Configuration 클래스에서 SecurityFilterChain 빈 정의를 검색.
이를 위해, @EnableWebSecurity를 통해 스프링 시큐리티가 활성화된다.


2. SecurityFilterChain 생성

2.1. HttpSecurity 객체 생성 및 주입
스프링은 SecurityFilterChain 빈을 생성하기 위해 HttpSecurity 객체를 자동으로 주입.
HttpSecurity는 스프링 시큐리티가 제공하는 클래스이며, 보안 규칙(인증, 인가, CSRF, 세션 관리 등)을 정의하는 데 사용된다.

2.2. 개발자 정의 보안 설정
개발자가 작성한 @Bean 메서드에서 HttpSecurity DSL(도메인 특화 언어)을 사용해 보안 규칙을 설정.
URL 접근 제어: .authorizeRequests()로 경로별 인증 및 권한 규칙 설정.
인증 방식: .formLogin(), .httpBasic() 등을 통해 인증 방식 설정.
보안 기능 추가/제외: .csrf(), .sessionManagement() 등을 통해 보안 정책 구성.

2.3. build() 호출로 SecurityFilterChain 생성
http.build() 메서드가 호출되면:
HttpSecurity에 설정된 규칙을 기반으로 필터들이 생성되고, SecurityFilterChain 객체로 빌드된다.
생성된 SecurityFilterChain은 스프링 컨텍스트에 빈으로 등록된다.

3. SecurityFilterChain 등록 및 실행
DelegatingFilterProxy와 연결:
DelegatingFilterProxy는 HTTP 요청이 들어올 때 SecurityFilterChain을 실행.
요청은 SecurityFilterChain의 필터를 순차적으로 통과하며 보안 검사를 받는다.


* 필터의 실행 순서:
SecurityFilterChain은 필터를 순차적으로 실행하며, 각 필터는 다음과 같은 보안 작업을 수행:
인증(Authentication): UsernamePasswordAuthenticationFilter.
인가(Authorization): FilterSecurityInterceptor.
CSRF 보호: CsrfFilter.

보안 검사를 통과한 요청:
필터 체인을 통과한 요청만 디스패처 서블릿(DispatcherServlet)으로 전달되어 컨트롤러에서 처리된다.




** 스프링 시큐리티의 주요 필터

1. SecurityContextPersistenceFilter
역할: SecurityContext를 요청의 시작 시 복원하고, 요청 처리 후 저장.

사용되는 빈:
SecurityContextHolderStrategy: SecurityContext를 저장하고 관리하는 전략.


2. UsernamePasswordAuthenticationFilter
역할: 사용자 이름과 비밀번호를 기반으로 인증을 처리.

사용되는 빈:
AuthenticationManager: 인증 작업의 중심 역할.
UserDetailsService: 사용자 정보를 로드.
PasswordEncoder: 비밀번호를 암호화하고 비교.


3. BasicAuthenticationFilter
역할: HTTP Basic 인증을 처리.

사용되는 빈:
AuthenticationManager: Basic 인증 처리의 핵심.
UserDetailsService: 인증 과정에서 사용자 정보를 로드.


4. BearerTokenAuthenticationFilter
역할: HTTP Bearer 토큰(JWT)을 기반으로 인증을 처리.

사용되는 빈:
JwtDecoder: JWT 토큰을 디코딩하고 검증.
AuthenticationManager: Bearer 인증을 처리.


5. RememberMeAuthenticationFilter
역할: Remember-Me 쿠키를 사용하여 인증 상태를 유지.

사용되는 빈:
RememberMeServices: Remember-Me 토큰을 처리하고 인증 상태를 복원.


6. AnonymousAuthenticationFilter
역할: 인증되지 않은 사용자에게 익명 권한을 부여.

사용되는 빈:
GrantedAuthoritiesMapper: 익명 사용자의 기본 권한을 매핑.


7. ExceptionTranslationFilter
역할: 인증 또는 권한 부족 예외를 처리.

사용되는 빈:
AuthenticationEntryPoint: 인증 실패 시 동작.
AccessDeniedHandler: 권한 부족 시 처리.


8. FilterSecurityInterceptor
역할: 요청 URL에 대한 접근 권한을 확인.

사용되는 빈:
AccessDecisionManager: 사용자의 권한과 요청 리소스의 권한을 비교.
SecurityMetadataSource: 요청 리소스의 권한 정보를 제공.


9. CsrfFilter
역할: 요청의 CSRF 토큰을 검증.

사용되는 빈:
CsrfTokenRepository: CSRF 토큰을 저장하고 로드.
CsrfToken: 요청마다 검증되는 CSRF 토큰 객체.