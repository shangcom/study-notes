포인트컷 표현식

구성 : 접근 제어자, 반환 타입, 패키지와 클래스명, 메서드 이름, 매개변수

접근 제어자	: 생략하면 모든 접근 제어자를 허용
반환 타입 : 생략 불가능, * 사용으로 모든 반환 타입 허용.
패키지 및 클래스 경로 : 생략 불가능. *와 ..을 사용해 범위 지정 가능.
메서드 이름 : 생략 가능. 지정하지 않으면 해당 클래스의 모든 메서드 매칭.
매개변수 : 생략 불가능. (..)으로 모든 매개변수 허용

 * 
애스터리스크(Asterisk)
특정 요소의 모든 값을 매칭.
반환 타입, 메서드 이름, 패키지 및 클래스 이름, 매개변수 타입 등에서 사용 가능.
예) *Controller : Controller로 끝나는 모든 클래스
*Service* : 중간에 Service가 들어가는 모든 클래스.
*.. 모든 패키지와 하위 패키지

 .. 
닷닷, 더블닷
모든 하위 또는 가변 인자.
패키지 경로에서 : 모든 하위 패키지
매개변수 : args(가변 매개변수)


접근제어자(public 등) : 접근 제어자를 생략할 때는 *를 쓰지 않고, 해당 위치를 비워 둔 상태로 표현식을 작성.

예제1)
execution(public * com.example..*Controller.*(..))

public : public 접근 제어자를 가진 메서드
* : 모든 반환 타입
com.example.. : com.example 패키지와 그 하위 패키지
*Controller : 이름이 Controller로 끝나는 모든 클래스
* : 클래스 내 모든 메서드
(..) : 모든 타입과 개수의 매개변수
com.example와 하위 패키지의 Controller로 끝나는 클래스에서 모든 public 메서드에 대해 애드바이스를 적용


예제2)
execution(* *..*Repository.findBy*(Long, ..)) 
모든 접근 제어자(접근제어자 생략)
* : 모든 반환 타입
*.. : 모든 패키지와 하위 패키지
*Repository : 이름이 Repository로 끝나는 모든 클래스.
findBy* : 메서드 이름이 findBy로 시작하는 모든 메서드.
(Long, ..) : 첫 번째 매개변수가 Long 타입이며, 이후 매개변수는 개수와 타입에 관계없이 임의의 매개변수를 허용
모든 상위 및 하위 패키지에서 이름이 Repository로 끝나는 클래스 중, findBy로 시작하고 첫 번째 매개변수가 Long인 모든 메서드를 매칭



** @args 포인트컷의 기본 동작
@args는 메소드의 파라미터 타입에 특정 어노테이션이 적용된 경우 그 메소드를 포인트컷으로 매칭하는 데 사용됩니다.
중요한 점은, @args는 메소드 파라미터 자체에 붙은 어노테이션이 아닌, 파라미터로 전달된 객체의 타입에 붙은 어노테이션을 검사한다는 것입니다.
**@args**는 파라미터 타입에 어노테이션이 적용된 경우에만 포인트컷 매칭이 가능합니다.
파라미터 자체의 어노테이션을 매칭하려면 리플렉션 사용이 필요합니다.
실무에서는 메소드나 클래스 수준 어노테이션(@annotation, @within 등)으로 포인트컷을 매칭하는 것이 더 일반적입니다.
