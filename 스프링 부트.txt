** 스프링 부트 애플리케이션 배포 및 실행 준비되기까지의 과정 정리

(기본 전제)
스프링 애플리케이션과 내장 톰캣은 같은 JVM 프로세스에서 함께 동작.
스프링 애플리케이션 종료 시 톰캣도 함께 종료.

jvm의 역할 : 
애플리케이션 실행 환경 제공.
JVM은 스프링 애플리케이션과 내장 톰캣을 동일한 프로세스 내에서 실행.

스프링 애플리케이션의 역할 : 
내장 톰캣(Web 서버)을 초기화하고, HTTP 요청을 처리할 수 있는 환경(SPRING 컨텍스트)을 준비.
이후 내장 톰캣의 실행 상태를 유지하기 위해 run() 메서드는 블록 처리되어 실행 유지됨.

내장 톰캣의 역할:
HTTP 요청을 수신하고, 스프링 컨텍스트에 로드된 애플리케이션의 정보(컨트롤러, 서비스 등)을 참조하여 요청을 처리한 뒤 응답 반환.



(배포 단계)

1. 빌드:
IDE 또는 CI/CD 파이프라인에서 JAR 파일 생성.
Maven: mvn package 또는 Gradle: ./gradlew build 명령어 사용.
빌드 도구에 따라 애플리케이션에 필요한 종속성 및 설정이 포함된 실행 가능한 JAR 파일 생성.

2. 파일 전송:
서버에 JAR 파일 업로드.
예: scp myapp.jar user@server:/path/to/deploy/.
CI/CD 파이프라인 또는 AWS S3, FTP 등의 다양한 전송 방식도 활용 가능.

3. 실행:
JAR 파일 실행: java -jar myapp.jar.
필요시, VM 옵션 예시: -Dspring.profiles.active=prod로 활성화할 프로파일 설정 가능.



(애플리케이션 초기화)

1. 애플리케이션 실행
main 메서드 실행 → SpringApplication.run() 호출.
Spring 컨텍스트와 내장 톰캣 초기화 시작.


2. Spring 컨텍스트 초기화

2-1. 애플리케이션 설정 로드:
@SpringBootApplication과 application.properties를 스캔하여 설정 정보를 로드.
이 애노테이션은 @Configuration, @EnableAutoConfiguration, @ComponentScan을 포함하여 자동 구성을 활성화.

2-2. Component Scan 수행:
@Component, @Service, @Repository, @Controller 등으로 선언된 클래스를 검색.
클래스 정의는 JVM의 메서드(Method) 영역에 로드되고, 빈 생성을 위해 메타데이터로 사용.

2-3. Bean 등록 및 의존성 주입:
Spring 컨텍스트가 Bean 객체를 생성하여 힙(Heap)에 저장.
Bean 간의 의존성을 분석하고 생성자 주입, 필드 주입, 세터 주입 방식을 통해 의존성을 주입.

2-4. DispatcherServlet 생성 및 초기화:
@EnableWebMvc 또는 Spring Boot의 기본 구성으로 DispatcherServlet이 생성되고, Spring 컨텍스트와 연결.


3. 내장 톰캣 초기화

3-1. TomcatServletWebServerFactory 생성:
Spring Boot의 자동 구성에 의해 생성.

3-2. 톰캣 서버 인스턴스 생성:
HTTP 커넥터와 서블릿 컨테이너가 초기화.
기본 포트: 8080. 필요 시 server.port를 통해 변경.

3-3. DispatcherServlet 등록:
톰캣의 서블릿 컨테이너 초기화 후 DispatcherServlet이 Spring 컨텍스트에서 생성되고 서블릿 컨테이너에 기본 URL 매핑(/)으로 등록됨.

3-4. 스레드 풀 생성:
DispatcherServlet 등록 후 톰캣은 HTTP 요청을 처리하기 위한 스레드 풀을 생성.
기본 설정: 최대 스레드 수 200, 최소 여유 스레드 10.
server.tomcat.threads.max 등의 프로퍼티를 통해 제어 가능.


4. Spring 컨텍스트와 톰캣 연결
DispatcherServlet이 톰캣과 Spring 컨텍스트를 연결.
HTTP 요청이 들어오면 톰캣이 DispatcherServlet으로 전달.
DispatcherServlet은 Spring 컨텍스트를 참조하여 HTTP 요청을 HandlerMapping을 통해 적절한 컨트롤러로 매핑하고, HandlerAdapter를 통해 컨트롤러를 호출.


5. 애플리케이션 실행 준비 완료

5-1. SpringApplication.run() 은 종료되지 않고 대기 상태 유지
main 메서드는 run() 메서드 호출 후 블록 상태로 유지되며, JVM 종료 시까지 실행 상태를 유지함.

5-2. 톰캣의 대기 상태:
톰캣은 요청을 대기하며, 요청이 들어오면 스레드 풀에서 스레드를 할당.
Actuator를 활용하면 /actuator/health와 같은 엔드포인트를 통해 애플리케이션 상태 점검 가능.


4. 최종 점검
이제 애플리케이션은 다음과 같은 상태.

JVM 힙에 Spring 컨텍스트와 Bean 객체가 저장되어 준비 상태.
톰캣은 HTTP 요청-응답 처리를 위해 대기 상태.
DispatcherServlet은 Spring 컨텍스트와 톰캣 간의 요청 처리 중재 역할 수행.



* 각 구성 요소와 JVM 메모리 구조

(구성 요소 : JVM 메모리 위치	/ 설명)
Spring 컨텍스트	: 힙(Heap) / 모든 Bean 객체를 관리하는 컨텍스트.
DispatcherServlet	: 힙(Heap) / HTTP 요청을 Spring 컨텍스트로 전달하는 중재자 역할.
Bean 객체 :	힙(Heap) / 컨트롤러, 서비스, 리포지토리 등 Spring 컨텍스트에 의해 관리되는 객체.
톰캣의 스레드 풀 : 힙(Heap) / HTTP 요청 처리를 위한 스레드 풀.
HTTP 요청/응답 데이터	: 힙(Heap) / 요청 처리 중 생성되는 데이터 객체. 요청 종료 시 GC에 의해 제거.
클래스 정의 및 메타데이터 : 메서드(Method) 영역 (Metaspace) /	Bean 클래스의 정의와 정적 변수는 Metaspace에 저장됨. JVM 클래스 로더에 의해 관리됨.



build\libs>java -Dpassword=asdfasdf -jar external-0.0.1-SNAPSHOT.jar --user_name=fdasfdas --password=new
-Dxxx=xxx 옵션을 사용하여 시스템 속성을 지정하려면, java 명령어와 -jar 옵션 사이에 작성
커맨드 라인 옵션 인수는 -jar 다음에 작성

** 프로메테우스가 tomcat thread 표시하지 않을 때
properties.yml에 아래 내용 추가.
management:
  server:
    tomcat:
      mbeanregistry:
        enabled=true:



** 스프링 부트 애플리케이션 설정 방식의 비교와 사용 빈도
1. properties 파일
주요 사용 목적: 
애플리케이션의 기본 설정을 정의하며, 배포 시점에 코드와 함께 포함되는 고정적인 설정을 관리합니다.

특징:
설정 파일(application.properties 또는 application.yml)이 코드와 함께 저장되기 때문에 기본 설정과 공통 설정을 관리하는 데 유리합니다.
환경에 따라 추가 설정 파일을 분리할 수 있어, application-dev.properties, application-prod.properties 같은 방식으로 환경별 설정을 쉽게 관리합니다.

사용 빈도: 매우 높음. properties 파일은 대부분의 스프링 애플리케이션에서 기본 설정 파일로 사용되며, 코드와 함께 관리되는 설정 파일로 매우 널리 사용됩니다.


2. 환경 변수 (env)
주요 사용 목적: 
운영체제 또는 컨테이너 수준에서 민감한 정보(예: 데이터베이스 비밀번호, API 키 등)를 관리하거나, 배포 환경에 따라 동적으로 변경할 설정을 관리합니다.

특징:
애플리케이션 코드와 분리되어 있어 보안적으로 중요한 설정을 코드베이스 밖에서 관리할 수 있습니다.
컨테이너화된 애플리케이션이나 클라우드 환경에서 특히 많이 사용됩니다.
운영체제에서 제공되므로 언제든지 수정 가능하며, 애플리케이션 재배포 없이도 설정 변경이 가능합니다.

사용 빈도:
높음. 민감한 정보나 배포 환경에 맞춘 설정을 위해 env는 거의 필수적이며, 배포 환경에서 많이 사용됩니다.


3. 커맨드 라인 인수
주요 사용 목적: 
일회성 실행 옵션을 지정하거나, 빠르게 설정을 덮어쓰고 테스트하기 위한 목적으로 사용됩니다.

특징:
properties나 env보다 우선순위가 높아, 특정 설정을 빠르게 덮어쓰거나 동적으로 변경할 때 유리합니다.
일반적으로 배포 스크립트, 테스트 환경, 개발 시 특정 옵션을 전달할 때 유용합니다.
그러나 영구적인 설정에는 적합하지 않고, 주로 일회성 실행 옵션을 지정하는 데 주로 쓰입니다.

사용 빈도: 
상대적으로 낮음. 커맨드 라인 인수는 특정 환경에서 빠르게 설정을 테스트하거나 임시로 변경할 때는 유용하지만, 영구적인 설정 관리를 위해 properties나 env보다 자주 사용되지는 않습니다.


종합적 결론
일반적인 설정 관리: properties 파일을 기본으로 사용합니다.
환경별 민감 정보나 동적 설정: 환경 변수가 선호됩니다.
일회성 실행 옵션이나 빠른 테스트: 커맨드 라인 인수를 사용합니다.
즉, 커맨드 라인 인수는 properties나 env보다 사용 빈도가 낮고, 특정 상황에 필요한 설정을 일시적으로 변경할 때 유용한 보조적인 수단으로 쓰이는 경우가 많습니다.


우선 순위 : 동일한 키가 여러 소스에서 정의된 경우, 우선순위가 높은 소스의 값이 적용되고, 나머지 값은 무시됩니다.
커맨드 라인 옵션 인수 (e.g., --server.port=8081)
자바 시스템 속성 (e.g., -Dserver.port=8081)
환경 변수 (e.g., SERVER_PORT=8081)
애플리케이션 프로퍼티 파일 (e.g., application.properties에서 server.port=8081)
기본 설정값 (예: 스프링 부트가 내장하고 있는 기본값)



**Bean 등록 기준
"이 객체가 애플리케이션 전반에서 공유되거나 다른 클래스에서 재사용될 필요가 있는가, 그리고 트랜잭션 처리나 의존성 주입이 필요한가?"

빈으로 등록해야 하는 것:
상태를 가지는 객체: 상태(필드 값)를 가지고 있으며, 다른 곳에서 이를 공유해야 한다면 빈으로 등록하는 것이 좋습니다. 대표적으로 서비스나 레포지토리 객체들이 해당됩니다.
서비스: MemberService, OrderService 같은 핵심 비즈니스 로직을 처리하는 클래스.
레포지토리: MemberRepository, OrderRepository처럼 데이터베이스와 연동되는 클래스.
데이터 소스 및 트랜잭션 매니저: DataSource, TransactionManager와 같이 데이터베이스 연결과 트랜잭션 관리를 담당하는 클래스.

빈으로 등록하지 않아도 되는 것:
유틸리티: 단순 로직을 처리하거나 공통적으로 사용할 수 있는 로깅, 계산 등의 유틸리티 클래스.
상태를 가지지 않고 호출만 필요한 객체.



**Bean 자동 등록

자동 등록: 스프링 부트가 자동으로 제공하는 빈은 일반적으로 프레임워크 인프라에 관련된 부분
DataSource, TransactionManager, EntityManager, RestTemplate 등
이러한 부분은 스프링 부트가 기본 설정을 통해 자동으로 제공해주기 때문에 개발자가 따로 설정하지 않아도 됨

직접 등록: 비즈니스 로직과 관련된 Repository, Service, Controller 클래스는 직접적으로 등록.
이는 스프링 부트가 비즈니스 로직의 의도를 알 수 없기 때문에 자동으로 등록하지 않으며, 개발자가 명확하게 어떤 클래스를 빈으로 관리할지 선언해야 하기 때문.




* 컴포넌트 스캔 방식 vs. Java Config 방식

컴포넌트 스캔 방식
장점:

간결함: 클래스에 어노테이션만 추가하면 스프링이 자동으로 빈을 등록해줌.
표준화: @Component, @Service, @Repository, @Controller 등의 어노테이션을 사용해 역할을 명확히 구분.
자동화: 스프링이 패키지를 스캔하여 자동으로 빈을 등록함.
단점:

구현체 교체가 불편: 인터페이스의 구현체를 교체할 때 여러 클래스를 찾아다니며 수정해야 함.
환경별 빈 설정이 어려움: 개발, 테스트, 운영 환경에 따라 빈 설정을 다르게 하기 어려움


Java Config 방식
장점:

중앙집중식 관리: 모든 빈 설정을 한 곳에서 관리할 수 있어 유지보수가 쉬움.
구현체 교체 용이성: 인터페이스의 구현체를 변경할 때, 설정 파일만 수정하면 됨.
환경별 빈 설정 용이: 프로파일을 사용하여 개발, 테스트, 운영 환경에 따라 다른 빈을 설정할 수 있음.
더 많은 제어: 빈 초기화, 소멸 콜백 등을 명시적으로 설정할 수 있음.
단점:

설정 파일 작성 필요: 추가적인 설정 파일을 작성해야 함.
가독성: 설정 파일이 커질수록 가독성이 떨어질 수 있음.


** 스프링 컨테이너와 핵심 인터페이스 정리

1. 스프링 컨테이너
스프링 애플리케이션에서 객체(빈)의 생성, 관리, 의존성 주입을 담당.
빈 생성 및 관리
의존성 주입(Dependency Injection)
설정 관리(XML, 자바 설정 클래스, 애너테이션)
AOP(Aspect-Oriented Programming)
이벤트 처리
리소스 관리
환경 추상화

2. BeanFactory
빈의 생성, 설정, 관리의 기본 기능 제공.
getBean(String name): 이름으로 빈 조회
getBean(Class<T> requiredType): 타입으로 빈 조회
containsBean(String name): 빈 존재 여부 확인
isSingleton(String name): 싱글톤 여부 확인
isPrototype(String name): 프로토타입 여부 확인
대표 구현체: DefaultListableBeanFactory

3. ApplicationContext
BeanFactory를 확장하여 추가적인 기능 제공.

추가 기능:  ApplicationContext extends EnvironmentCapable, ListableBeanFactory, HierarchicalBeanFactory, MessageSource, ApplicationEventPublisher, ResourcePatternResolver
메시지 소스 처리(국제화) : 한국에서 접속 -> 한국어 / 영어권에서 접속 -> 영어 출력.
애플리케이션 이벤트 처리 : 이벤트를 발행하고 구독하는 모델을 편리하게 지원.
환경 변수 및 애플리케이션 속성 처리 : 로컬, 개발, 운영 등을 구분해서 처리.
리소스 조회 : 파일, 클래스, 외부 등에서 리소스를 편리하게 조회.
주요 구현체:
GenericXmlApplicationContext : : 클래스패스, 파일 시스템, URL 등 다양한 리소스를 로드. 빈 직접 등록하는 방법. factoryBean 사용하지 않음.
AnnotationConfigApplicationContext: 자바 설정 클래스 기반 설정 : factoryBean 통해서 우회적으로 빈 등록하는 방법.
GenericWebApplicationContext: 웹 애플리케이션용 컨텍스트


* 매개변수가 있는 컨트롤러 메서드

Spring MVC는 컨트롤러 메서드의 매개변수로 전달된 클래스 타입을 자동으로 객체로 생성함.
여기에 DataBinder를 사용해 HTTP 요청 파라미터의 값을 이름이 일치하는 객체의 필드에 자동으로 바인딩함.
즉, Spring mvc는 기본 생성자를 사용하여 객체를 생성하며, 요청 파라미터의 이름과 객체의 필드 이름이 일치하면 값을 바인딩함.
요청 파라미터와 필드 이름이 일치하지 않으면 해당 파라미터는 객체의 필드에 바인딩되지 않고 무시.
바인딩되지 않은 필드는 클래스에서 정의된 기본값을 유지.


* @Configuration 애너테이션
스프링 컨테이너에게 해당 클래스가 하나 이상의 @Bean 메서드를 포함하고 있음을 알려주고, 이 클래스가 빈 정의를 위한 소스임을 명시.
이 애너테이션은 @Bean 메서드들 사이의 의존성을 관리하고, 싱글톤 빈을 보장.


* Bean의 역할 정의 : BeanDefinition은 Bean의 메타 정보를 가지고 있는 클래스. 'BeanDefinition.ROLE_역할이름' 메서드 통해 각 빈의 역할을 확인할 수 있다.
     * ROLE_APPLICATION: 비즈니스 로직과 관련된 애플리케이션 빈 <- 개발자가 @Bean, @Component 등으로 등록한 빈은 기본적으로 애플리케이션 빈으로 등록된다.
     * ROLE_SUPPORT: 애플리케이션 빈을 지원하는 데 사용되는 빈
     * ROLE_INFRASTRUCTURE: 스프링 프레임워크 자체에서 사용하는 빈


** 싱글톤 패턴

static: 클래스 로더에 의해 관리되며, 클래스가 로드될 때 생성됨
스프링 싱글톤 빈: 스프링 컨테이너에 의해 관리되며, 스프링 애플리케이션 컨텍스트가 초기화될 때 생성됨.

- 전통적인 싱글톤 패턴 
public class TraditionalSingleton {
    private static final TraditionalSingleton instance = new TraditionalSingleton(); //private static final로 선언해서 클래스 로드 시 바로 객체 하나를 만들어 둔다.

    private TraditionalSingleton() { // 생성자를 private로 막아 다른 곳에서 사용할 수 없게한다. 즉, 처음 클래스 로드 시 만들어진 객체 외에는 생성하지 못하도록 한다.
        // private 생성자
    }

    public static TraditionalSingleton getInstance() { //getInstance 메서드를 제공하여, 이 메서드를 통해 처음 만들어진 객체를 제공한다.
        return instance;
    }
}

- 스프링 프레임워크의 싱글톤 패턴 : 
static을 이용해 클래스 로드 시 객체를 생성해 미리 올려두는 방식 아님. 스프링 컨테이너가 알아서 싱글톤 패턴으로 관리함. 스프링 컨테이너가 초기화될 때 빈을 생성.
@Configuration 애너테이션이 붙은 클래스(AppConfig)는 프록시 객체로 변환됨. 이 프록시 객체는 각 메서드 호출을 가로채서, 이미 생성된 빈을 반환하거나 새로 생성된 빈을 반환하도록 함.
이를 통해 동일한 빈 인스턴스를 반환하여 싱글톤을 보장.



** 스프링 컨테이너(ApplicationContext)와 빈 관리

1. 스프링 컨테이너(ApplicationContext)란?
스프링 프레임워크의 핵심 컴포넌트로, Spring 애플리케이션에서 Bean 객체의 생성, 관리, 소멸까지의 라이프사이클을 관리.

Bean 관리: 
객체(Bean)의 생성, 의존성 주입(Dependency Injection), 생명주기 제어.

Bean 정의와 인스턴스 분리:
빈 정의 저장소 (Bean Definition Registry): Bean의 메타데이터(이름, 타입, 스코프 등)를 저장.
싱글톤 빈 저장소 (Singleton Bean Registry): 실제 Bean 인스턴스를 저장.


2. 스프링 컨테이너 초기화 단계

(1) Bean 메타데이터 등록
컨테이너 초기화 시 @ComponentScan, @Configuration, XML 설정 등을 통해 Bean 정의를 수집하고, BeanDefinition을 생성.
Bean 정의 저장소에 Bean 이름, 타입, 의존성, 스코프 등의 정보를 등록.

(2) Bean 인스턴스 생성
기본(Eager Initialization):
싱글톤 스코프의 Bean은 애플리케이션 시작 시점에 즉시 생성.
생성된 Bean 객체는 싱글톤 빈 저장소에 등록.

지연 로딩(Lazy Initialization):
Bean에 @Lazy 애노테이션이 설정되면, Bean 정의만 등록되고 요청 시점에 Bean 인스턴스가 생성.
이 경우, 컨테이너는 프록시 객체를 싱글톤 빈 저장소에 등록.
프록시는 Bean 요청 시 이를 가로채어 필요한 작업을 수행한 뒤 실제 Bean 객체를 반환.


3. 빈 요청 및 반환 과정

(1) 기본 (Eager Initialization)
getBean 메서드를 통해 Bean 요청 시, 스프링 컨테이너는 싱글톤 빈 저장소에서 기존에 생성된 Bean 객체를 반환.

(2) 지연 로딩(Lazy Initialization)
@Lazy가 설정된 Bean은 요청 시점에만 초기화:
Bean 정의 저장소에서 Bean 정보를 참조해 Bean 객체 생성.
의존성 주입 후, 싱글톤 빈 저장소에 등록.
생성된 Bean 객체 반환.


4. @Configuration 클래스의 역할

(1) @Configuration 클래스와 프록시
@Configuration 클래스는 Bean 정의를 제공하는 구성 클래스.
Spring은 이 클래스를 프록시 객체로 변환하여 @Bean 메서드 호출을 가로챔.
목적: 싱글톤 보장
@Bean 메서드가 여러 번 호출되더라도 동일한 Bean 인스턴스를 반환.

(2) 동작 방식
컨테이너 초기화 시:
컨테이너가 초기화되면 @Configuration 프록시가 모든 @Bean 메서드를 호출하고, 생성된 Bean을 싱글톤 빈 저장소에 등록.
@Lazy가 설정된 경우, Bean 정의만 등록하고 인스턴스는 생성하지 않음.

Bean 요청 시:
요청이 들어오면, 프록시는 싱글톤 저장소에서 기존 Bean 객체를 반환.
저장소에 Bean이 없을 경우, @Bean 메서드를 호출해 Bean을 생성하고 등록.


5. 무상태(Stateless) Bean
스프링 Bean은 **무상태(stateless)**로 설계해야 함.
대부분의 Bean은 싱글톤으로 공유되므로, 상태(stateful) 필드를 가지면 여러 사용자 요청에서 데이터가 덮어씌워질 위험이 있음.
상태 정보는 메서드 로컬 변수나 별도의 데이터 저장소(예: DB, 세션 등)를 사용.


6. 최종 정리
스프링 컨테이너의 동작 흐름

초기화 단계:
Bean 정의 저장소에 Bean 메타데이터 등록.
싱글톤 스코프의 Bean은 즉시 생성(Eager), @Lazy가 설정된 경우 요청 시 생성.

Bean 요청 시:
기본적으로 싱글톤 빈 저장소에서 기존 Bean을 반환.
지연 로딩된 Bean은 프록시를 통해 생성 후 반환.

@Configuration의 역할:
Bean 정의를 제공하며, 프록시를 통해 @Bean 메서드 호출을 제어하여 싱글톤 보장.




** @Autowired 시 같은 타입의 빈이 여러개 있을 경우?
@Component 클래스를 빈으로 등록할 때 빈 이름 지정 : 
Component 어노테이션의 value 속성을 이용하거나, @Qualifer("빈 이름")을 통해 지정할 수 있음.
일반적으로 전자를 사용함 @Component("빈 이름")
생성자 주입을 하는 경우, 지정한 빈 이름을 사용함으로써 특정 인터페이스를 구현한 빈이 두개 이상 있을 경우, no qualifying 오류를 해결할 수 있음
사실 생성자의 매개변수에 @Qualifier를 사용해 주입할 빈 이름을 명확히 하는 순간, @Component 클래스에서 value속성을 사용해 이름을 지정해줄 필요가 없어진다. 하나의 인터페이스를 구현한 여러 클래스가 있어서 문제인건데
해당 클래스의 이름을 직접 지정하는 순간 value 속성을 통해 이름을 지어줘야하는 의미가 없어진다.
혹은 @Primary 어노테이션을 Component 클래스에 달아주면, 생성자에서 별도로 빈 지정해주지 않아도 Primary로 지정된 빈을 우선으로 주입한다.
@Primary와 @Qualify가 동시에 지정됐을 경우 @Qualify가 우선한다.




* 커스텀 어노테이션 만들기
@Target: 이 애노테이션이 필드, 메서드, 매개변수, 타입, 다른 애노테이션에 적용될 수 있도록 합니다.
@Retention: 이 애노테이션이 런타임 동안 유지되어 리플렉션을 통해 접근할 수 있도록 합니다.
@Inherited: 이 애노테이션이 상속될 수 있도록 합니다.
@Documented: 이 애노테이션이 Javadoc에 포함되도록 합니다.
@Qualifier: 스프링의 의존성 주입에서 "빈 이름"이라는 이름의 빈을 식별하도록 합니다.
생성자 주입의 @Qualifier("문자열")대신 커스텀 어노테이션을 사용하는 이유? : 컴파일 타임 안전성 문제 해결.
문자열 사용 시, 오타가 있을 경우 컴파일 타임에 감지되지 않으며, 런타임에 문제가 발생함.
커스텀 애노테이션을 사용하면, 컴파일러가 애노테이션의 사용을 검증할 수 있음. 잘못된 문자열이 아닌 잘못된 애노테이션 사용은 컴파일 타임에 오류로 잡힌다.
따라서 등록할 빈 이름을 커스텀 어노테이션에 @Qualify("빈 이름")을 통해 등록하고, 커스텀 어노테이션을 등록할 빈 클래스에 붙여준다.
만약 같은 인터페이스를 구현한 서로 다른 클래스에 같은 커스텀 어노테이션을 붙이면, 이 역시 qualifying 오류가 발생한다. 
만약 다른 인터페이스를 구현한 클래스들에 같은 커스텀 어노테이션을 붙이면, 스프링은 주입하려는 빈의 타입을 기준으로 빈을 선택하므로, 충돌이 발생하지 않는다.


* 일반적인 의존성 주입 vs Map/List 통한 의존성 주입
-일반
목적: 고정된 단일 빈을 주입받아 사용.
방법: 생성자, 세터, 필드 주입을 통해 특정 타입의 빈을 주입받음.
특징: 단일 빈 주입. 명확한 의존성.
특정 비즈니스 로직을 처리하는 고정된 단일 빈 사용.
예: 단일 할인 정책을 사용하는 주문 서비스.

- Map과 List
목적: 같은 타입의 여러 빈을 한꺼번에 주입받아 다양한 방식으로 사용.
방법: Map<String, T> 또는 List<T> 형태로 주입받음.
특징: 여러 빈 주입. 빈 이름 사용해 특정 빈 선택 가능 (Map의 키가 빈 이름), 유연성 증가. 순서 보장 (List의 경우).
다양한 비즈니스 로직에 따라 여러 구현체를 유연하게 사용.
예: Map : 여러 할인 정책을 관리하고, 조건에 따라 다른 정책을 적용하는 할인 서비스.
List : 해당 타입의 모든 빈이 필요한 경우, List<T> 형태로 주입받아 순서대로 빈을 처리. 빈의 순서 중요할 경우 @Order 어노테이션 사용 가능.


*빈 생애주기와 콜백 메서드
콜백 메서드는 빈 객체 자체의 생애주기를 관리하기 위해 사용. 빈 객체는 스프링 컨테이너에 의해 관리되므로 콜백 메서드의 호출 시점은 스프링 컨테이너에 의해 결정. 
콜백 메서드는 빈 객체의 초기화와 소멸 시점에 스프링 컨테이너가 빈 객체를 관리하는 과정에서 호출됨.

* 콜백 메서드가 필요한 이유
리소스 초기화와 해제: 데이터베이스 연결, 파일 핸들러 등 외부 리소스를 초기화하거나 연결을 설정하는 작업이 필요할 때 / 애플리케이션 종료 시 이러한 리소스를 안전하게 해제해야 할 때.
설정 및 검증: 빈이 생성된 후 특정 필드나 설정값을 검증하고 초기화. 의존성이 주입된 후 추가적인 설정이 필요한 경우 초기화 콜백 메서드를 사용.
클린업 작업: 애플리케이션 종료 시 임시 파일 삭제, 캐시 데이터 정리 등 클린업 작업
* 인터페이스 사용하는 초기화, 소멸 메서드는 거의 사용하지 않음(옛날 방식)
InitializingBean 인터페이스의 afterPropertiesSet() 메서드
DisposableBean 인터페이스의 destroy() 메서드
@PostConstruct와 @PreDestroy 어노테이션:
@PostConstruct: 빈이 초기화된 후 호출될 메서드에 사용
@PreDestroy: 빈이 소멸되기 전에 호출될 메서드에 사용
@Bean 어노테이션의 initMethod와 destroyMethod 속성:

@Bean(initMethod = "customInit", destroyMethod = "customDestroy")와 같이 지정



**오류 코드
Spring에서 검증 오류가 발생했을 때 이를 설명하기 위해 사용하는 식별자입니다. 이 식별자는 주로 메시지 파일에서 적절한 오류 메시지를 찾기 위한 키로 사용됩니다.
required라는 오류 코드:

이 코드는 "필수 입력값이 누락되었다"는 의미의 오류를 나타냅니다.
Spring은 "required"라는 코드로 메시지 파일에서 이 오류에 대한 설명을 찾습니다.
range라는 오류 코드:

이 코드는 "입력값이 허용된 범위를 벗어났다"는 오류를 의미합니다.
Spring은 "range"라는 코드를 이용해 적절한 메시지를 찾습니다.


**DefaultMessageCodesResolver**
오류 코드와 객체 이름, 필드 이름 등의 정보를 바탕으로 다양한 메시지 키를 생성하는 클래스입니다. 검증 오류가 발생했을 때, 이를 식별할 수 있는 메시지 키를 만들어 
Spring이 메시지 파일에서 적절한 오류 메시지를 찾을 수 있도록 돕습니다.
오류 코드 (Error Code): 검증 오류가 무엇인지 식별하는 코드. 예: "required", "range", "typeMismatch".
객체 이름 (Object Name): 폼 데이터가 바인딩되는 객체 이름. 예: "item" (예를 들어, Item 클래스).
필드 이름 (Field Name): 오류가 발생한 필드의 이름. 예: "price" (예를 들어, Item 객체의 price 필드).
필드 타입 (Field Type): 오류가 발생한 필드의 타입. 예: Integer.

예시: bindingResult.rejectValue("price", "range", new Object[]{1000, 1000000}, null);
오류 코드: "range" (검증 오류가 범위를 벗어났음을 의미).
객체 이름: "item" (폼이 바인딩된 객체 Item).
필드 이름: "price" (오류가 발생한 필드).
필드 타입: Integer (price 필드의 타입).

DefaultMessageCodesResolver는 위의 정보를 바탕으로 구체적인 메시지 키부터 일반적인 메시지 키까지 다양한 패턴으로 메시지 키를 생성합니다. 예시 상황에서는 다음과 같은 키가 생성됩니다:
range.item.price: (오류 코드 + 객체 이름 + 필드 이름)
가장 구체적인 메시지 키로, 해당 필드에 대한 구체적인 오류 메시지를 찾습니다.
range.price: (오류 코드 + 필드 이름)
객체 이름을 제외한, 필드 이름에 대한 오류 메시지를 찾습니다.
range.item: (오류 코드 + 객체 이름)
필드를 제외하고, 해당 객체에서 발생한 일반적인 오류 메시지를 찾습니다.
range: (오류 코드만)
필드와 객체 이름을 모두 제외하고, 범위를 벗어났다는 일반적인 오류 메시지를 찾습니다.

**MessageSource**
DefaultMessageCodesResolver**는 **BindingResult.rejectValue()**나 BindingResult.reject() 메서드에 전달된 매개변수를 바탕으로 오류 코드를 생성합니다. 
그 후, **MessageSource**가 그 오류 코드를 바탕으로 messages.properties 파일에서 적절한 오류 메시지를 찾아서 적용합니다.
예를 들어, **range.item.price**를 찾고, 없으면 range.price, 없으면 range.item, 끝으로 **range**를 찾습니다.
해당하는 메시지가 messages.properties 파일에 있으면, 그 메시지를 적용합니다.

4
**정적 리소스
Spring Boot에서 static 폴더에 저장된 모든 파일은 자동으로 정적 리소스로 간주되며, 브라우저에서 요청 시 서버가 이를 제공하게 됩니다.

정적 리소스 요청이란 CSS, JS, 이미지와 같은 고정된 파일을 웹 브라우저에서 요청하는 것을 의미합니다. 주소창에 해당 경로를 입력하여 직접 접근할 수 있으며, 주로 HTML 문서에서 링크된 정적 파일들을 불러오는 과정에서 발생합니다.
정적 리소스 요청은 웹 페이지를 구성하는 외부 파일들을 브라우저가 요청하는 과정에서 발생하며, 주소창에서 직접 요청할 수도 있습니다.

정적 리소스 처리의 특징:
고정된 파일(정적 파일)은 서버에서 특별한 처리 없이 클라이언트에 전달됩니다.
정적 리소스 요청은 주로 웹 페이지가 구성 요소(CSS, 이미지 등)를 불러오기 위한 비즈니스 로직과 관련이 없는 파일 요청이라고 생각하면 됩니다.



** WebServerCustomizer에서 설정된 경로로 바로 이동하지 않고 ErrorPageController를 거쳐서 뷰를 반환하는 이유

1. 컨트롤러를 거치는 이유
애플리케이션에서 오류가 발생했을 때, 단순히 뷰만 반환하는 것이 아니라, 오류에 대한 추가적인 처리를 할 수 있도록 하기 위해 컨트롤러를 거칩니다. 이 컨트롤러는 단순히 뷰만 반환하는 것이 아니라, 오류에 대한 추가적인 정보나 로직을 실행할 수 있는 중요한 기회를 제공합니다.

몇 가지 이유를 구체적으로 살펴보겠습니다:
오류 정보 제공:

HttpServletRequest와 HttpServletResponse 객체를 통해 오류와 관련된 정보를 처리할 수 있습니다. 예를 들어, 오류가 발생한 URL, 오류 상태 코드, 예외 메시지 등을 로그로 남기거나, 이 정보를 바탕으로 사용자에게 맞춤형 오류 메시지를 보여줄 수 있습니다.
request.getAttribute("javax.servlet.error.status_code")와 같은 방식으로 발생한 오류의 세부 정보를 가져와 처리할 수 있습니다.
유연한 로직 처리:

특정 오류에 대해 단순히 뷰를 반환하는 것 이상으로, 별도의 비즈니스 로직을 추가할 수 있습니다. 예를 들어, 500 오류가 발생했을 때 개발팀에 자동으로 이메일을 보내는 기능을 추가할 수 있습니다.
다른 HTTP 상태 코드나 예외에 대한 조건부 로직을 추가하여, 상황에 맞는 더 세밀한 오류 처리를 할 수 있습니다.
다양한 오류 처리 방식 지원:

특정 조건에 따라 뷰 외에도 JSON, XML과 같은 형식으로 응답을 제공하거나, 리디렉션을 수행할 수도 있습니다. 예를 들어, REST API에서는 JSON 형식의 오류 메시지를 반환할 수 있습니다.
2. 왜 WebServerCustomizer에서 바로 뷰를 반환하지 않는가?
WebServerCustomizer는 **WAS(Web Application Server)**가 제공하는 오류 처리 메커니즘을 설정하는 역할만 합니다. 이 설정은 WAS가 발생한 오류를 처리할 수 있는 경로를 지정하는 것이며, 해당 경로에서 어떻게 처리할지는 컨트롤러나 서블릿이 결정합니다.

WAS가 처리할 수 있는 것은 HTTP 상태 코드에 맞춰서 미리 정의된 경로로 요청을 리디렉션하는 것이며, 직접 뷰를 렌더링하거나 비즈니스 로직을 실행하는 것은 WAS의 역할이 아닙니다. 따라서 WebServerCustomizer는 경로만 설정하고, 실제 오류 처리는 컨트롤러가 수행하는 구조가 되는 것입니다.

3. 컨트롤러를 생략하고 바로 뷰를 반환할 수 있는가?
이론적으로는 컨트롤러를 생략하고 바로 뷰를 반환할 수도 있습니다. 즉, WebServerCustomizer에서 설정된 경로가 서블릿이나 뷰 파일을 직접 가리키도록 설정할 수도 있습니다. 하지만, 이 경우:

오류 처리에 대한 유연성이 줄어듭니다. 예를 들어, 오류가 발생했을 때 별도의 로그를 남기거나 추가적인 비즈니스 로직을 실행할 수 있는 기회를 잃게 됩니다.
오류 정보를 동적으로 처리할 수 없습니다. 예외 발생 시 동적인 메시지나 상태 코드를 뷰에 반영하는 등의 작업이 어려워집니다.
컨트롤러를 통해서 오류를 처리하면 훨씬 더 유연하게 오류에 대한 정보를 처리하고, 다양한 응답을 만들 수 있는 장점이 있습니다.

정리
두 단계를 거치는 이유는 컨트롤러를 통해 오류 정보를 다루고, 추가적인 로직을 실행할 수 있는 유연성을 확보하기 위함입니다.
WebServerCustomizer는 단지 오류 발생 시 리디렉션할 경로를 설정하는 역할을 하고, 그 경로에서 실제로 무엇을 할지는 컨트롤러나 서블릿에서 처리합니다.
컨트롤러 없이 직접 뷰로 이동할 수는 있지만, 그러면 오류에 대한 세밀한 처리와 추가적인 로직을 적용할 수 있는 기회를 잃게 됩니다.




** WebMvcConfigurer
Spring MVC에서 웹 애플리케이션의 MVC 설정을 커스터마이징할 수 있게 해주는 인터페이스입니다. 기본적으로 Spring Boot는 많은 MVC 관련 설정을 자동으로 제공하지만,
개발자가 직접 설정을 추가하거나 수정해야 할 때 WebMvcConfigurer를 구현하여 사용할 수 있습니다. 이를 통해 세부적인 설정 조정이 가능해지며, 특정 요구 사항에 맞는 커스텀 동작을 추가할 수 있습니다.
WebMvcConfigurer를 사용해서 수동으로 등록하는 것들은 Spring이 자동으로 등록하지 않는 경우나, 기본 설정을 커스터마이징해야 할 때 사용됩니다.
HandlerExceptionResolver와 같은 일부 기능은 수동 등록이 필요하며, 자동으로 등록되지 않는 경우도 많습니다.

자동 등록과 수동 등록의 차이:
자동 등록: Spring이 자동으로 스캔해서 등록하는 방식으로, 주로 @Component, @Controller, @RestController, @Service, @Repository 등의 어노테이션이 있는 클래스를 자동으로 스캔하여 빈으로 등록합니다.

예: 일반적인 컨트롤러, 서비스, 리포지토리 등의 **빈(Component)**들은 자동 등록됩니다.
수동 등록: Spring의 기본 동작을 커스터마이징하거나 추가 기능을 설정할 때는 명시적으로 수동으로 등록해야 합니다. 이를 통해 더 세밀한 제어가 가능합니다.

예: HandlerExceptionResolver, Interceptor, 정적 자원 핸들러, 뷰 리졸버 등.
자동 등록 대신 수동 등록이 필요한 이유:
우선순위 제어: 수동 등록을 통해 여러 설정 요소들(예: 인터셉터, 예외 처리기 등)의 실행 순서를 명확히 설정할 수 있습니다.
명확한 설정: 예외 처리나 요청 전후의 흐름을 확실하게 제어할 수 있습니다.
특정 기능 확장: 기본적으로 제공되지 않는 기능이나 확장을 추가할 때는 수동 등록이 필요합니다.


** @ResponseStatus:
어노테이션으로 예외 클래스에 고정된 상태 코드와 메시지를 설정할 수 있습니다.
정적인 방식으로 예외가 발생할 때 항상 미리 정의된 상태 코드와 메시지가 반환됩니다.
예외 클래스 자체에 어노테이션을 붙여야 하기 때문에, 외부 라이브러리의 예외에는 사용할 수 없습니다.

** ResponseStatusException:
동적으로 상태 코드와 메시지를 지정할 수 있는 예외 클래스입니다.
예외가 발생할 때 상황에 맞는 상태 코드와 메시지를 동적으로 설정할 수 있습니다.
특히 외부 라이브러리에서 발생하는 예외를 처리할 때, 이를 감싸서 적절한 HTTP 상태 코드와 메시지로 변경할 수 있습니다.


 ** 템플릿 메서드 패턴
상위 클래스에 알고리즘의 기본 골격(템플릿)을 정의하고, 하위 클래스에서 알고리즘의 세부 단계를 구현.
즉, 공통된 로직은 상위 클래스에서 처리하고, 변화하는 부분은 하위 클래스에서 오버라이딩하여 구현

execute() : 공통 부분

call() : 구체적인 로직.

protected로 외부에서의 호출을 막는 이유? execute까지 세트로 동작해야 하는 메서드인데 call 부분만 떼어내서 사용하는 일 방지. 정해진 흐름대로만 작동하도록 강제.

일일히 구현 클래스 만들지 말고, 익명 클래스 사용하면 됨.
람다식은 사용 불가(함수형 인터페이스에만 사용 가능, 여기는 추상 클래스를 구현하는 것임)


** 
org.aopalliance.intercept.MethodInterceptor,
org.springframework.cglib.proxy.MethodInterceptor,
java.lang.reflect.InvocationHandler는 모두 메서드 호출을 가로채는 역할을 하지만, 각각의 목적, 적용 대상, 사용 방식이 다릅니다.

1. 개요 및 역할 요약
org.aopalliance.intercept.MethodInterceptor:

목적: 주로 스프링 AOP에서 메서드 호출 전후에 부가 로직을 추가하기 위해 사용됩니다.
적용 대상: JDK 동적 프록시와 CGLIB 프록시 모두에서 사용 가능.
특징: 스프링의 AOP 설정과 통합해 AOP 적용 시 Advice로서 동작합니다.

org.springframework.cglib.proxy.MethodInterceptor:
목적: CGLIB 프록시를 통해 구체 클래스 기반의 프록시를 생성하고, 메서드 호출을 가로채기 위해 사용됩니다.
적용 대상: 구체 클래스를 상속하는 클래스 기반 프록시에만 적용 가능. 인터페이스가 필요하지 않습니다.
특징: MethodProxy를 사용하여 성능 최적화된 메서드 호출이 가능합니다.

java.lang.reflect.InvocationHandler:
목적: JDK 동적 프록시에서 인터페이스를 구현하는 프록시를 생성하고 메서드 호출을 가로채기 위해 사용됩니다.
적용 대상: 인터페이스 기반 프록시에만 적용 가능. 구체 클래스에는 사용할 수 없습니다.
특징: 표준 자바 라이브러리에서 제공되며, 리플렉션을 통해 메서드 호출이 이루어집니다.

2. 메서드 가로채기 방식
org.aopalliance.intercept.MethodInterceptor:
invoke(MethodInvocation invocation) 메서드로 메서드 호출을 가로챕니다.
MethodInvocation 객체가 제공되어 메서드 호출 전후에 부가 로직을 추가할 수 있으며, proceed() 메서드를 호출해 원본 메서드를 실행합니다.
스프링 AOP에서 부가 로직을 정의하는 Advice로 등록하여 동작합니다.

org.springframework.cglib.proxy.MethodInterceptor:
invoke(Object obj, Method method, Object[] args, MethodProxy proxy) 메서드로 메서드 호출을 가로챕니다.
MethodProxy 객체가 제공되어 성능 최적화된 방식으로 원본 메서드를 호출할 수 있습니다.
주로 구체 클래스를 상속하는 CGLIB 기반 프록시에서 메서드를 가로채기 위한 인터페이스입니다.

java.lang.reflect.InvocationHandler:
invoke(Object proxy, Method method, Object[] args) 메서드를 통해 인터페이스 기반 메서드 호출을 가로챕니다.
리플렉션(Method.invoke())을 사용해 원본 메서드를 호출하며, JDK 동적 프록시에서만 작동합니다.
인터페이스가 없는 경우 사용할 수 없으며, 인터페이스 기반의 간단한 프록시에 적합합니다.

3. 스프링 AOP와의 통합성
org.aopalliance.intercept.MethodInterceptor:
스프링 AOP의 핵심 인터페이스로, 포인트컷(Pointcut)과 어드바이저(Advisor)와 자연스럽게 연동되어 AOP 기능을 완전하게 지원합니다.
스프링 프록시 팩토리(ProxyFactory)와 함께 사용할 때, JDK 동적 프록시나 CGLIB 프록시를 자동 선택하여 인터페이스 및 클래스 기반의 프록시 생성이 가능합니다.

org.springframework.cglib.proxy.MethodInterceptor:
CGLIB 라이브러리의 메서드 인터셉터로, 스프링 AOP보다는 직접 CGLIB 프록시를 생성할 때 주로 사용합니다.
스프링에서 직접 사용할 일은 적지만, CGLIB이 필요할 때 스프링이 자동으로 이 인터페이스를 사용해 프록시를 생성합니다.

java.lang.reflect.InvocationHandler:
자바 표준 인터페이스로 스프링 AOP 설정과는 별도로 작동합니다.
스프링 AOP의 포인트컷, 어드바이저와 직접 연동되지 않으며, 스프링이 아닌 순수 자바 환경에서 인터페이스 기반 프록시를 간단히 구성할 때 유용합니다.

결론
**org.aopalliance.intercept.MethodInterceptor**는 스프링 AOP에서 부가 기능을 적용할 때 주로 사용되며, 스프링의 ProxyFactory와 통합되어 강력한 AOP 지원을 제공합니다.
**org.springframework.cglib.proxy.MethodInterceptor**는 CGLIB을 통한 클래스 기반 프록시 생성에 사용되며, 성능 최적화된 메서드 호출이 가능해 구체 클래스 프록시가 필요할 때 유용합니다.
**java.lang.reflect.InvocationHandler**는 자바 표준 JDK 동적 프록시로, 인터페이스 기반 프록시에 적합하며, 순수 자바 환경에서 간단히 프록시를 생성할 때 사용됩니다.
스프링 AOP와의 통합성과 확장성 측면에서는 org.aopalliance.intercept.MethodInterceptor가 가장 적합하며, CGLIB이나 JDK 표준 프록시는 특정 요구 사항에 따라 선택적으로 사용됩니다.


** ProxyFactory와 어드바이저의 관계
프록시 생성 준비:
ProxyFactory는 지정된 target 객체를 기반으로 프록시 객체를 생성하는 역할을 합니다. 여기서 프록시 생성에 필요한 모든 부가 기능 설정을 담고 관리하는 기능도 제공합니다.

어드바이저 추가를 위한 기능:
ProxyFactory는 addAdvisor() 메서드를 통해 어드바이저(Advisor)를 추가하고 관리할 수 있습니다. 이 어드바이저는 프록시가 실행될 때 적용할 포인트컷과 어드바이스를 포함하며, 실제 부가 기능의 적용 여부와 위치를 제어합니다.

어드바이저와의 통합된 프록시 생성: 
ProxyFactory는 어드바이저를 포함하여 프록시 생성 설정이 완료되면, 모든 어드바이저에 정의된 포인트컷과 어드바이스에 따라 프록시 로직이 결정됩니다. 즉, 어떤 메서드에 어떤 부가 기능이 적용될지를 프록시 생성 전에 최종적으로 설정하는 역할을 합니다.




** 빈 후처리기 자동 호출 원리
스프링 컨테이너는 BeanPostProcessor 인터페이스를 구현한 모든 빈을 빈 후처리기로 인식합니다. BeanPostProcessor는 빈 생성 과정 중 특정 지점에 개입할 수 있는 후킹 포인트를 제공하는 인터페이스로, 다음과 같은 원리로 작동합니다.

빈 후처리기 인식 및 등록:
스프링 컨테이너가 애플리케이션을 초기화할 때, BeanPostProcessor 인터페이스를 구현한 빈(PackageLogTraceProxyPostProcessor)을 찾아 등록합니다.
등록된 후처리기는 빈 생명주기의 초기화 전후에 자동으로 호출됩니다.

빈 초기화 전후에 자동 호출:
스프링은 모든 빈을 초기화할 때 후처리기를 자동으로 호출합니다.
postProcessBeforeInitialization() 메서드는 빈 초기화 직전에, postProcessAfterInitialization() 메서드는 초기화 직후에 호출됩니다.
후처리기가 등록되어 있으면 스프링이 각 빈의 초기화 과정 중에서 자동으로 후처리기의 메서드를 호출하므로, postProcessAfterInitialization() 메서드에서 빈을 프록시로 교체하는 작업을 할 수 있습니다.

프록시 객체로 대체:
postProcessAfterInitialization() 메서드에서 원본 빈 대신 프록시를 반환하면, 스프링은 원본 빈이 아닌 프록시 객체를 컨테이너에 등록합니다. 이 과정은 자동으로 수행됩니다.



** JDK 동적 프록시의 한계:
인터페이스 기반으로 프록시를 생성하므로, 구체 클래스 타입으로 주입이 불가능합니다.
인터페이스에 정의되지 않은 구현 클래스의 메서드는 프록시 객체로 접근할 수 없으므로, 클래스에 특화된 기능을 사용해야 할 때 문제가 됩니다.


** CGLIB 프록시의 한계:
구체 클래스를 상속받아 프록시를 생성하므로 인터페이스에 종속되지 않고 구체 클래스 타입으로 주입할 수 있지만, 몇 가지 제약이 있습니다.
기본 생성자 필요: CGLIB 프록시는 기본 생성자를 필요로 하지만, 스프링이 objenesis 라이브러리를 통해 자동 해결하여 큰 문제는 되지 않습니다.
생성자 두 번 호출 문제: 특정 상황에서 성능 오버헤드를 발생시킬 수 있으나, 대부분의 경우 큰 영향을 미치지 않습니다.
final 클래스와 메서드 제한: CGLIB 프록시는 final로 선언된 클래스나 메서드에 AOP를 적용할 수 없기 때문에, 이를 사용할 때 주의가 필요합니다.



** @Documented 해당 애노테이션이 JavaDoc에 포함될 수 있도록 지정하는 메타-애노테이션

** @ComponentScan 이 애노테이션을 사용하는 클래스의 패키지를 기준으로 하위 패키지들에서 스프링 빈을 자동으로 스캔하여 등록.
용도: @MySpringBootApplication에서 @ComponentScan을 포함시키면, 이 애노테이션을 사용하는 클래스의 패키지를 기준으로 하위 패키지들에서 스프링 빈을 자동으로 스캔하여 등록할 수 있게 됩니다.
스프링 부트에서의 역할: @SpringBootApplication이 이 역할을 포함하고 있기 때문에, 스프링 부트에서는 @ComponentScan을 별도로 선언할 필요 없이 자동으로 스캔이 가능합니다.



** 라이브러리, 프레임워크, API

예시:
Java 플랫폼:
Java API (명세) → java.util, java.io 같은 라이브러리 → Spring, Hibernate 같은 프레임워크.

Spring 생태계:
Spring Framework(API와 구현 포함) + 외부 라이브러리와의 조합 → 전체 애플리케이션 개발 플랫폼.

API는 설계도:
"이 집은 이렇게 만들어야 한다"는 규칙과 인터페이스를 정의.

라이브러리는 자재와 도구:
집을 짓기 위해 제공된 목재, 벽돌, 망치 등 실제 구현체.

프레임워크는 조립 키트:
"이 순서대로 이 재료를 사용하여 집을 완성하세요"라고 조립 과정을 관리하는 틀.

API는 소프트웨어 간의 통신 규칙을 제공.
라이브러리는 구현된 재사용 가능한 기능의 집합.
프레임워크는 애플리케이션 구조와 제어 흐름을 관리.

추상화 제공: 개발자가 세부 구현에 신경 쓰지 않고도 고수준의 작업을 수행할 수 있도록 추상화된 인터페이스를 제공합니다.
생산성 향상: 반복적인 작업을 줄이고, 개발에 필요한 시간과 노력을 감소시킵니다.
표준화: 표준화된 방식으로 애플리케이션을 구성할 수 있게 도와줍니다.

API:
명세의 제공
API는 "어떻게 기능에 접근하고 호출해야 하는지"를 명확히 정의하는 인터페이스입니다.
API는 설계된 규칙과 표준을 제공하며, 이 규칙을 기반으로 라이브러리나 프레임워크가 동작합니다.
상위 개념에서 API는 소프트웨어 구성 요소 간 커뮤니케이션의 규칙입니다.

라이브러리:
구현된 기능의 집합
라이브러리는 API의 규칙에 따라 제공된 구체적인 구현체입니다.
상위 개념에서 라이브러리는 재사용 가능한 코드의 모음으로, 소프트웨어 개발을 간소화합니다.

프레임워크:
설계와 제어 흐름의 틀 제공
프레임워크는 API와 라이브러리를 포함하며, 전체 애플리케이션의 설계와 실행 흐름을 관리합니다.
상위 개념에서 프레임워크는 소프트웨어를 구성하는 구조와 규칙의 틀입니다.



** 클래스패스
Java 프로그램이 컴파일되거나 실행될 때, 필요한 클래스 파일(.class)이나 라이브러리(JAR 파일)의 경로를 정의하는 설정이다. 
클래스패스는 컴파일 클래스패스와 런타임 클래스패스로 구분되며, 각각의 용도와 포함되는 요소가 다르다.

1. 컴파일 클래스패스
컴파일 클래스패스는 컴파일 시점에 컴파일러가 소스 코드에서 참조하는 클래스나 라이브러리를 찾기 위해 사용된다.
소스 코드에 명시된 클래스나 메서드를 올바르게 컴파일하기 위해 필요한 정의를 이 경로에서 찾는다.

특징:
소스 코드에 명시적으로 참조된 클래스나 인터페이스만 포함된다.
컴파일 시점에만 사용되며, 런타임 시에는 불필요할 수 있다.
애노테이션 프로세서와 같이 컴파일 단계에서만 동작하는 라이브러리도 포함된다.

예시:
롬복(Lombok): 롬복은 컴파일 시점에 메서드나 필드를 자동으로 생성하지만, 런타임에는 더 이상 필요하지 않은 라이브러리이다.


2. 런타임 클래스패스
런타임 클래스패스는 실행 시점에 JVM(Java Virtual Machine)이 필요한 클래스나 리소스를 로드하기 위해 사용된다.
프로그램이 실행 중 동적으로 참조하는 클래스나 데이터 파일이 포함된다.

특징:
런타임 중에 필요한 모든 클래스, 라이브러리, 리소스를 포함해야 한다.
컴파일 클래스패스에는 없지만, 런타임에서만 필요한 라이브러리가 추가될 수 있다.
설정 파일, 이미지 파일, 데이터베이스 드라이버 등 런타임에 필요한 외부 리소스도 포함될 수 있다.

예시:
JDBC 드라이버: JDBC 드라이버는 데이터베이스와의 연결을 지원하며, 런타임에만 필요하다.
3. 컴파일 클래스패스와 런타임 클래스패스의 관계
컴파일 클래스패스와 런타임 클래스패스는 밀접한 관계를 가지지만, 항상 동일하지는 않다.
컴파일 클래스패스가 런타임 클래스패스의 일부가 되기도 하지만, 런타임 클래스패스에는 동적 로딩이나 실행 환경에 따라 추가적인 요소가 포함될 수 있다.


차이점:

사용 시점:
컴파일 클래스패스는 소스 코드 컴파일 시 필요하다.
런타임 클래스패스는 프로그램 실행 중에 필요하다.

포함 대상:
컴파일 클래스패스에는 소스 코드에서 참조되는 클래스와 라이브러리가 포함된다.
런타임 클래스패스에는 실행 중 참조되는 클래스, 라이브러리, 설정 파일 등이 포함된다.
