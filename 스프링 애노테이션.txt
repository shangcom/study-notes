** @ComponentScan
역할:
지정된 패키지를 스캔하여 @Component 계열 어노테이션(@Component, @Service, @Repository, @Controller, @Configuration)이 붙은 클래스들을 자동으로 빈으로 등록합니다.
일반적으로 @Configuration 클래스와 함께 사용하여 특정 패키지를 스캔하도록 설정합니다.
이 어노테이션을 통해 자동으로 빈이 등록되므로, 수동으로 빈을 등록하는 과정을 생략할 수 있습니다.



** @Import
역할:
다른 @Configuration 클래스 또는 구성 클래스를 현재 설정 파일에 추가하여 빈을 가져오는 데 사용됩니다.
이 어노테이션을 통해 모듈화된 여러 구성 파일을 쉽게 가져와 사용할 수 있습니다.
주로 외부 라이브러리나 특정 환경별 설정을 추가할 때 사용됩니다.



** @Component 계열 어노테이션
@Configuration, @Component, @Controller, @Service, @Repository

적용 가능 대상 : 스프링이 관리할 수 있는 사용자 정의 클래스

빈 등록 방식 : 클래스 레벨에서 사용되며, 스프링의 컴포넌트 스캔을 통해 자동으로 빈으로 등록됩니다.

역할 : 스프링이 자동으로 등록할 수 있는 간단한 빈이나 역할이 명확한 빈을 등록할 때 주로 사용합니다.

용도 : 역할에 따라 클래스를 구분하여 빈으로 등록합니다.
@Component: 역할에 구애받지 않는 일반적인 빈을 등록할 때 사용합니다.
@Controller: MVC 패턴에서 컨트롤러 역할을 하는 클래스에 붙여 사용합니다.
@Service: 비즈니스 로직을 수행하는 서비스 클래스에 사용합니다.
@Repository: 데이터베이스와 상호작용하는 데이터 액세스 객체에 사용합니다.



** @Configuration

역할: 
여러 개의 @Bean을 포함하는 구성 클래스에 사용됩니다. @Configuration을 붙이면 해당 클래스는 스프링 컨테이너에서 빈 설정 파일의 역할을 합니다.

@Bean 메서드로 정의된 객체들이 싱글톤으로 보장되며, 이들을 스프링 컨테이너에 빈으로 등록하는 기능을 제공합니다.

@Bean과의 관계: 
@Configuration 클래스는 여러 @Bean 메서드를 포함하여 빈 정의를 집약적으로 관리할 수 있습니다.



** @Bean 어노테이션

역할:
@Bean은 개발자가 직접 정의한 메서드가 반환하는 객체를 스프링 컨테이너에 빈으로 등록하기 위해 사용됩니다. 이 메서드를 통해 정의된 객체는 스프링 컨테이너에서 관리되고, 필요할 때 다른 빈에서 주입받아 사용할 수 있습니다.
개발자가 직접 빈을 등록해야 할 경우 @Configuration 클래스 내에서 메서드를 통해 빈을 정의하고 반환된 객체를 스프링 컨테이너에 빈으로 등록.

적용 가능 대상 :
메서드에서 반환할 수 있는 모든 객체에 적용 가능합니다. 주로 외부 라이브러리 객체나 스프링이 자동 구성하지 않는 객체에 사용.

사용 위치:
@Bean은 보통 @Configuration 클래스 내의 메서드 위에 붙습니다. @Configuration 클래스는 하나 이상의 @Bean 메서드를 포함하여 애플리케이션의 구성 정보를 제공합니다.

특징:
@Bean 메서드의 반환 객체는 스프링 컨테이너에서 싱글톤으로 관리됩니다.
@Bean은 직접 객체를 생성하는 메서드를 정의하고 이를 빈으로 등록하는 명시적인 방식입니다.



**@Profile("default")



*  @Autowired

역할:
스프링 컨테이너에 등록된 빈 간의 의존성을 자동으로 주입할 때 사용합니다. 예를 들어, 한 빈에서 다른 빈을 사용해야 할 때, @Autowired를 통해 필요한 빈이 자동으로 주입됩니다.
즉, 다른 빈이 필요한 경우, 해당 빈을 자동으로 주입해주는 어노테이션입니다.
빈 간의 의존성 주입은 @Autowired가 자동으로 주입해 주며, @Autowired가 필드, 생성자, 메서드에 사용되어 필요한 의존성을 해결해 줍니다.


사용 위치:
@Autowired는 필드, 생성자, 또는 메서드에 붙어 의존성을 주입받을 위치를 지정합니다.

특징:
@Autowired는 의존성 주입을 자동으로 처리하여 개발자가 빈을 직접 생성하지 않아도 됩니다.
주입 방식은 타입을 기준으로 이루어지며, 빈이 여러 개일 경우 @Primary나 @Qualifier로 특정 빈을 지정할 수 있습니다.




** @Conditional(XxxCondition.class) VS @ConditionalOnXxx

* @Conditional:

@Conditional은 특정 조건을 정의하는 Condition 구현체를 받아서 동작합니다. 즉, 직접 구현한 Condition 클래스의 matches 메서드에서 조건을 정의하고, 그 조건이 충족되면 해당 빈을 등록하는 방식입니다.

사용 방식: 
@Conditional(MyCondition.class)와 같이 Condition 구현체를 전달하여, 조건에 맞는지 확인하는 클래스를 직접 구현해야 합니다.

용도: 
Condition 인터페이스를 구현하여 커스텀 조건을 정의하고 싶을 때 사용합니다. 여러 설정 값이나 환경 정보를 조합하여 복잡한 조건을 설정해야 하는 경우에 적합합니다.

+ Condition 구현 클래스
용도: Condition 인터페이스를 구현하여 복잡한 논리 조건을 추가할 때 사용됩니다.

사용 방식:
matches 메서드에서 ConditionContext와 AnnotatedTypeMetadata를 사용해 애플리케이션의 환경, 시스템 속성, 메타데이터 등을 기반으로 다양한 논리 조건을 구현


*@ConditionalOnXxx
용도: 주로 간단한 속성 기반 조건에 사용되며, 설정된 속성이 특정 값일 때만 빈을 활성화할 수 있습니다.
별도의 Condition 구현체가 필요 없으며, @ConditionalOnProperty(name = "property", havingValue = "value")처럼 속성값을 바로 지정해 사용.

@ConditionalOnProperty(name = "property.name", havingValue = "expectedValue", matchIfMissing = true|false)

사용 방식: 
name 속성에는 조건으로 사용할 프로퍼티 이름을 지정하고, havingValue 속성에 해당 값이 일치할 때 조건을 만족하도록 설정합니다.
matchIfMissing을 통해 설정값이 없을 때 기본으로 true 혹은 false로 간주할지 결정할 수 있습니다.



** @ConditionalOnProperty 은 무엇을 보고 빈 생성을 결정하는가?

application.properties, VM Options의 시스템 속성값

* 속성 정의 방식
@ConditionalOnProperty는 name 속성에 지정된 이름(memory)과 havingValue 속성에 지정된 값(on)이 일치할 때만 조건을 만족하도록 합니다.
두 경우 모두 @ConditionalOnProperty 애너테이션에서 참조할 수 있는 속성(property)을 설정하는 방식입니다.

* 우선순위 및 참조 방식
application.properties와 VM 옵션에 중복으로 정의된 경우, Spring Boot는 VM 옵션의 값을 우선 적용합니다.
@ConditionalOnProperty는 두 위치에서 속성을 찾기 때문에, 설정 파일을 사용하거나 VM 옵션을 통해 외부에서 속성을 쉽게 변경할 수 있습니다.

* 차이점

설정 위치 및 관리 방식
application.properties: 애플리케이션 내부에서 관리하는 설정 파일로, src/main/resources 디렉토리에 위치합니다. 주로 프로젝트와 함께 제공되어야 하는 환경별 설정값을 정의합니다.
VM 옵션: 애플리케이션이 실행되는 환경에서 JVM에 전달되는 설정으로, IDE의 Run/Debug 설정이나 배포 스크립트에 포함됩니다. 애플리케이션 코드와는 별개로 관리되며, 실행 환경에 따라 외부에서 변경할 수 있습니다.

변경 편의성
application.properties: 설정 파일 자체를 수정해야 하므로, 코드 레벨에서 직접 속성을 관리하고자 할 때 유용합니다.
VM 옵션: 배포나 실행 시점에 유연하게 변경할 수 있습니다. 특히 운영 환경에서 코드 수정 없이 속성 값을 동적으로 바꿔야 할 때 유리합니다.

프로파일링
application.properties에서는 application-dev.properties, application-prod.properties 등으로 환경에 따라 프로파일별 설정 파일을 분리할 수 있습니다. 반면, VM 옵션은 단일 실행 환경에 대한 일회성 설정에 가깝습니다.

우선순위 차이
두 설정 모두 사용된 경우 VM 옵션이 더 높은 우선순위를 갖기 때문에, 동일한 속성이 두 위치에 중복으로 정의되면 VM 옵션이 최종적으로 적용됩니다.