@Configuration
public class HelloConfig {

    @Bean
    public HelloController helloController() {
        return new HelloController();
    }
}
여기서  public HelloController helloController()를 @Bean 메서드라고 부른다.
스프링 컨테이너는 이 메서드를 통해 HelloController의 생성자를 호출하여 객체를 생성해 스프링 빈으로 등록한다.


* 쿼리 파라미터는 Content-Type과 무관하다.
Content-Type 헤더는 HTTP 요청 또는 응답 메시지 바디의 형식을 정의하는 역할.
쿼리 파라미터는 요청 또는 응답 메시지와 무관하게 URL에서 데이터를 전달하는 방식임.

*
@ServletComponentScan
용도: 서블릿 관련 컴포넌트(서블릿, 필터, 리스너)를 스캔하고 서블릿 컨테이너에 등록.
스캔 대상:
@WebServlet
@WebFilter
@WebListener

@ComponentScan
용도: Spring의 일반적인 컴포넌트(빈)를 스캔하고 Spring 컨텍스트에 등록.
스캔 대상:
@Component
@Service
@Repository
@Controller
기타 Spring에서 관리하는 커스텀 컴포넌트

결론
포함 관계: @ComponentScan과 @ServletComponentScan은 서로 포함 관계가 아닌 별개의 어노테이션.
기능 차이: @ComponentScan은 Spring의 일반적인 컴포넌트를 스캔하며, @ServletComponentScan은 서블릿 관련 컴포넌트를 스캔함.
사용 상황: 서블릿 관련 컴포넌트를 자동으로 등록하려면 @ServletComponentScan을 사용해야 하고, Spring 빈을 스캔하려면 @ComponentScan을 사용해야 함.

* HTTP 헤더
HttpServletRequest: 클라이언트가 서버로 보낸 요청 정보를 읽는 객체로, 서버에서 읽기만 가능하며, 요청 헤더를 설정하거나 변경할 수 없음. 헤더 설정은 클라이언트 측에서만 가능.
HttpServletResponse: 서버가 클라이언트에게 보낼 응답을 작성하는 객체로, 서버에서 헤더를 설정 및 수정 가능. 이를 통해 클라이언트에게 전송할 응답의 상태 코드, 콘텐츠 유형 등을 지정.

만약 서버의 login.html에 작성된 login form을 통해 아이디와 비밀번호를 post로 submit 했다면?
submit을 누르면, 클라이언트는 해당 html을 바탕으로 request 메시지를 생성하고 이를 post 방식으로 서버에 전송한다.
서버는 이 요청 메시지를 받아서 처리한다.
즉, 서버 측에 양식과 전송 방식이 정의되어 있지만, 실질적으로 해당 폼을 사용하여 http 요청 메시지를 만드는 것은 클라이언트(브라우저)이다.


* 메시지 바디의 데이터를 ServletInputStream을 사용하여 읽어야 하는 경우?
폼 데이터를 제외한 다른 형식으로 데이터를 전송할 때(예: JSON, XML, 순수 텍스트 등), 데이터는 application/json, text/plain 등의 Content-Type을 사용하여 요청 바디에 포함됨.
이 경우, 데이터는 특정 키-값 쌍의 형태가 아니거나, 구조화되지 않은 형식일 수 있음.

-데이터 구조 및 형식
파라미터 전송 (RequestParamServlet): 데이터가 키-값 쌍의 정형화된 형태로 전송되며, getParameter() 메서드를 통해 쉽게 접근 가능.
요청 바디 전송 (RequestBodyStringServlet): 데이터가 구조화되지 않았거나, 특정 형식을 따르지 않을 수 있으며, 직접 스트림을 읽어야 함.

-접근 방법
파라미터 전송: getParameter(), getParameterNames(), getParameterValues() 등의 메서드를 사용하여 쉽게 접근.
요청 바디 전송: getInputStream() 또는 getReader()를 사용하여 바이트 스트림이나 문자 스트림을 읽고, 이를 적절히 변환해야 함.

-용도 및 유연성
파라미터 전송: 주로 폼 데이터 전송에 적합하며, 간단한 데이터 교환에 유리.
요청 바디 전송: 복잡한 데이터 구조(예: JSON, XML)나 바이너리 데이터 전송에 적합하며, 더 높은 유연성을 제공


* urlPatterns :
URL 패턴은 파일 시스템의 실제 경로와 무관하게 서블릿 매핑을 위한 논리적인 경로
실제 존재하지 않는 상위 경로를 포함시켜도 문제 없음.
예를 들어, 
@WebServlet(name = "MemberFormServlet", urlPatterns = "/servlet/members/new-form")
이렇게 했을 때, member라는 패키지가 파일 시스템에 존재하지 않아도 아무런 문제 없음.
URL 패턴을 통해 서블릿을 논리적으로 그룹화하고, 웹 애플리케이션의 구조를 가독성 있게 조직화하기 위한 것임.
웹 애플리케이션은 이 파일 시스템 구조를 기반으로 동작하지만, URL 패턴은 이와 독립적으로 설계됨.


*스프링 3.0 이상에서 jsp와 jstl 사용하기 위한 의존성

	// Spring Boot와 같은 임베디드(embedded) 톰캣 환경에서 JSP를 지원
	implementation 'org.apache.tomcat.embed:tomcat-embed-jasper'
	// jakarta.servlet:jakarta.servlet-api는 없어도 된다. 내장 톰캣이 이미 가지고 있음.

	// JSTL API and implementation : JSTL 인터페이스(jstl-api)와 구현체(jstl) 둘 다 필요함.
	implementation 'jakarta.servlet.jsp.jstl:jakarta.servlet.jsp.jstl-api'
	implementation 'org.glassfish.web:jakarta.servlet.jsp.jstl'

* parameter vs attribute
- Parameter는 클라이언트가 서버로 전달한 읽기 전용의 문자열 데이터.
Scope: 요청 단위. 즉, 한 번의 요청 동안에만 유효합니다.
전송 방식:
GET 요청: URL의 쿼리 스트링을 통해 전달.
POST 요청: HTTP 요청의 바디를 통해 전달 (주로 폼 데이터를 통해).
예시
GET 요청: http://example.com?name=John&age=30
POST 요청: HTML 폼을 통해 전송된 데이터

- Attribute는 서버 내부에서 데이터를 (Map처럼) 키-값 쌍으로 관리하고 스코프(Request, Session, Application)에 따라 데이터의 수명을 관리하며, 서버 측에서 데이터 공유하기 위한 역할.


* PrintWriter을 이용한 HTTP 응답 바디(메시지) 입력
        PrintWriter writer = response.getWriter();
        writer.write("안녕하세요");
작성한 내용은 서버가 클라이언트에게 전송하는 HTTP 응답의 바디에 포함되며, 클라이언트는 이 바디의 내용을 Content-Type에 따라 해석하고 처리함.
만약 Content-Type이 text/plain이었다면, 브라우저는 "안녕하세요"를 화면에 보여주는 것으로 처리함.

* WEB-INF 디렉토리?
보안: WEB-INF 디렉토리의 콘텐츠는 직접적인 클라이언트 접근이 불가능하여(url 치고 들어가려해도 웹서버 차원에서 막음), 민감한 정보를 보호.
구조화: WEB-INF 디렉토리는 설정 파일(web.xml), 라이브러리(JAR 파일), 컴파일된 클래스 파일 등을 포함하여 애플리케이션을 구조화하고 관리함.
접근 제한: 클라이언트는 WEB-INF 디렉토리에 직접 접근할 수 없지만, 서버 측 코드에서는 접근 가능.

* EL
	<li>id=<%=((Member)request.getAttribute("member")).getId()%></li>
이거 간편하게 EL로 쓰면
	<li>id=${member.id}</li>
이렇게 됨. 단, Member 클래스에 id에 대한 Getter 메서드 있어야함.


* request.getRequestURI() : 클라이언트가 요청한 URL에서 호스트 이름과 포트 번호를 제외한 경로 부분을 반환
 http://localhost:8080/myapp/members/list 요청했을 경우, "/myapp/members/list" 반환.


* ControllerV3에서 paramMap vs. model 간단 요약

- paramMap: Map<String, String>
역할: 클라이언트(사용자)로부터 서버로 전송된 입력 파라미터를 저장.
데이터 출처: HttpServletRequest에서 클라이언트가 보낸 요청 파라미터(예: 폼 데이터, URL 쿼리 스트링)를 추출하여(createParamMap(request)메서드) 저장.
사용 시점: 컨트롤러에서 요청을 처리할 때 사용, 예를 들어 폼에서 입력된 데이터를 받아 비즈니스 로직에 활용.

- model: Map<String, Object>
역할: 서버에서 처리된 비즈니스 로직의 결과를 저장하고, 이를 뷰(JSP)에 전달.
데이터 출처: 컨트롤러에서 비즈니스 로직을 처리한 후 생성된 객체나 데이터를 저장.
사용 시점: **뷰(JSP)**에 데이터를 전달할 때 사용, 화면에 표시될 데이터를 담아 JSP에서 활용 가능.

-핵심 차이점
paramMap: 클라이언트의 입력 데이터를 저장하며, 문자열(String) 타입으로 구성.
model: 서버에서 생성된 출력 데이터를 저장하며, **다양한 타입(Object)**의 데이터를 포함.


* @Controller, @RestController
- @Controller : 반환 값이 String이면 뷰 이름으로 인식된다. 그래서 뷰를 찾고 뷰가 랜더링 된다.
-@RestController: 반환 값으로 뷰를 찾는 것이 아니라, HTTP 메시지 바디에 바로 입력한다.
-@RequestMapping("/~~~") : "/~~~"으로 URL 호출이 오면 이 메서드가 실행되도록 매핑. 복수 지정 가능 : @RequestMapping({"/~~~", "/###", ........})


* @RequestMapping -> @GetMapping, @PostMapping
@RequestMapping에 속성으로 http 메서드를 지정하지 않으면, 메서드 종류(get, post, put, delete, patch)와 무관하게 호출됨.
- 메서드 지정 : @RequestMapping(value = "/new-form", method = RequestMethod.GET) 
-> @GetMapping("/new-form") 이것과 같음.


* content-type (미디어 타입) 설정
- consumes: 서버가 받아들일 콘텐츠 타입을 지정합니다. 클라이언트가 서버로 보내는 데이터 형식(Content-Type)을 제한하는 데 사용됩니다.
예시: @PostMapping(consumes = "application/json")은 JSON 형식의 요청만 서버가 받아들이겠다는 뜻입니다.

- produces: 서버가 내보낼 콘텐츠 타입을 지정합니다. 서버가 클라이언트에게 반환하는 응답의 데이터 형식을 설정합니다.
예시: @GetMapping(produces = "application/json")은 서버가 JSON 형식의 응답을 클라이언트에게 보낸다는 의미입니다.

- Accept 헤더: 클라이언트가 원하는 콘텐츠 타입을 서버에게 요청하는 방식입니다. 클라이언트가 응답을 원하는 형식을 이 헤더에 지정하여 서버에 알립니다.
예시: Accept: application/json은 클라이언트가 JSON 형식의 응답을 받고 싶다는 의미입니다.


* MultiValueMap : 하나의 키에 여러 값을 매핑할 수 있는 맵 구조로, Spring에서 HTTP 파라미터나 헤더를 다룰 때 유용하게 사용. 동일한 키에 여러 값을 간단하게 저장하고 처리할 수 있음.
일반적인 Map<K, V>는 키-값 쌍을 하나만 가지지만, MultiValueMap<K, List<V>> 구조는 하나의 키에 여러 값 리스트를 연결할 수 있음.
주로 HTTP 요청/응답의 파라미터나 헤더를 처리할 때 사용.


* @PathVariable vs @RequestParam
-@PathVariable : /users/{userId} 에서 {userId}가 PathVariable(경로 변수, PlaceHolder).
url의 특정 위치에서 동적인 값을 받기위해 사용.
-@RequestParam : 쿼리 파라미터나 URL에 포함된 쿼리 스트링에서 값을 추출. request.getParameter("userId")와 같음.
- 메서드 파라미터와 요청 파라미터 이름이 같으며, 단순 데이터 타입 (String, int, Integer 등)을 사용할 때
-> Spring은 자동으로 쿼리 파라미터를 메서드 파라미터에 매핑하고, 타입 변환도 자동으로 처리함. 즉, 값 받아올 때 어노테이션 작성하지 않고 바로 타입과 변수명 입력하면 된다.


* 요청 메서드와 응답
: HTTP 프로토콜에서는, 요청은 클라이언트가, 응답은 서버가 함. 서버가 요청하지 않음.
get, post, put, delete, patch 등 모든 http 메서드는 요청 메서드임. '응답 메서드'는 존재하지 않는다.
응답: 서버가 클라이언트의 요청을 처리한 후 상태 코드와 데이터를 보내는 것. 응답은 메서드가 아니라 응답 메시지 형식으로 전송됨.

- HTTP 응답에서 주로 다루는 것들: 상태 코드, 응답 헤더, 응답 바디
상태 코드: 서버가 요청에 대해 어떤 상태로 응답하는지를 나타내는 코드. 
응답 헤더: 응답에 대한 메타데이터 제공. 예: Content-Type: 응답의 데이터 형식(e.g., application/json, text/html). Set-Cookie: 쿠키 설정.
응답 바디: 요청에 대한 실제 데이터나 정보가 포함됨. 예를 들어, JSON, HTML, 텍스트 등의 형식으로 데이터가 전달됩니다.


* Spring의 파라미터 자동 주입
Spring에서 자동으로 주입되는 파라미터는 여러 가지가 있으며, 이러한 파라미터는 주로 요청(Request) 및 **응답(Response)**과 관련된 정보나 데이터를 처리하는 데 사용.
Spring MVC는 다양한 내장된 파라미터 타입을 컨트롤러 메서드에서 직접 사용할 수 있도록 자동으로 주입.
자동 주입 기능이 없다면 해당 객체들을 수동으로 생성하거나 메서드 안에서 해당 객체들을 직접 가져와야.

-HTTP 요청/응답 관련:
HttpServletRequest: HTTP 요청 객체로, 클라이언트의 요청 정보를 담고 있음.
HttpServletResponse: HTTP 응답 객체로, 서버가 클라이언트로 응답을 전송하는 데 사용됨.
HttpSession: 클라이언트의 세션을 관리하는 객체.
Principal: 인증된 사용자의 정보를 담고 있는 객체.
Locale: 요청한 클라이언트의 지역 정보를 제공.

-입출력 스트림:
InputStream: HTTP 요청 바디의 데이터를 읽기 위한 스트림.
OutputStream: HTTP 응답 바디의 데이터를 작성하기 위한 스트림.
Reader: 문자 데이터를 읽기 위한 입력 스트림 (텍스트 기반).
Writer: 문자 데이터를 응답으로 작성하기 위한 출력 스트림.

-애노테이션 기반 파라미터:
@RequestParam: 쿼리 파라미터, 폼 데이터 등을 처리.
@PathVariable: URL 경로 변수 값 주입.
@RequestHeader: HTTP 요청 헤더의 값을 주입.
@CookieValue: 쿠키 값을 주입.
@RequestBody: 요청 바디의 JSON이나 XML 데이터를 객체로 변환하여 주입.
@ModelAttribute: 폼 데이터나 쿼리 파라미터 등을 객체에 바인딩. 

**@ModelAttribute("XXXX")
메서드에 붙이면 그 메서드가 반환하는 객체를 모델에 자동으로 추가.

    @ModelAttribute("regions")
    public Map<String, String> regions() {
        Map<String, String> regions = new LinkedHashMap<>();
        regions.put("SEOUL", "서울");
        regions.put("BUSAN", "부산");
        regions.put("JEJU", "제주");
        return regions;
    }

컨트롤러 클래스 안에 이런 메서드가 있다면, 컨트롤러에 있는 모든 요청 메서드에 대해, 모델에 자동으로 @ModelAttribute가 붙은 메서드의 반환 객체를 담는다.
객체 이름은 "regions". HTML 뷰 렌더링 시에는 모델에 추가된 값이 뷰로 전달되어 사용됨.
REST API나 리다이렉트의 경우에는 모델에 데이터가 추가되지만, 실제로는 사용되지 않거나, 클라이언트로 전달되지 않습니다.


**@ModelAttribute**는 폼 데이터를 Java 객체로 바인딩하는 것과, 모델에 데이터를 추가하는 것을 동시에 수행하는 중요한 역할을 합니다.
바인딩: 클라이언트의 폼 데이터를 Java 객체에 자동으로 연결.
매핑: HTTP 요청 데이터를 Java 객체로 변환하는 과정.

@PostMapping("/add")
    public String addItem(@Validated @ModelAttribute("item") ItemSaveForm form, BindingResult bindingResult, RedirectAttributes redirectAttributes) {

        //특정 필드 예외가 아닌 전체 예외
        if (form.getPrice() != null && form.getQuantity() != null) {
            int resultPrice = form.getPrice() * form.getQuantity();
            if (resultPrice < 10000) {
                bindingResult.reject("totalPriceMin", new Object[]{10000, resultPrice}, null);
            }
        }

        if (bindingResult.hasErrors()) {
            log.info("errors={}", bindingResult);
            return "items/addForm";
        }

        //성공 로직
        Item item = new Item();
        item.setItemName(form.getItemName());
        item.setPrice(form.getPrice());
        item.setQuantity(form.getQuantity());

        Item savedItem = itemRepository.save(item);
        redirectAttributes.addAttribute("itemId", savedItem.getId());
        redirectAttributes.addAttribute("status", true);
        return "redirect:/items/{itemId}";
    }

1. Item itemSaveForm에 addForm에서 넘긴 필드를 바인딩한 Item 객체를 자동 생성.
2. 만약 검증 실패 시, 다시 addForm으로 itemSaveForm 객체를 넘겨줘서 그대로 표시할 수 있도록 뷰로 전달하는 역할. 이때 itemSaveForm은 뷰에서 "item"이라는 이름으로 사용된다.

        if (bindingResult.hasErrors()) {
            log.info("errors={}", bindingResult);
            return "items/addForm";
        }
검증 실패 시 템플릿에서 기존에 입력한 데이터와 오류 메시지를 보여주기 위해 추가로 코드 작성이 필요하지 않습니다. Spring MVC는 자동으로 모델 객체와 오류 정보를 뷰로 전달합니다.



**특정 HTTP 정보:
HttpMethod: 요청의 HTTP 메서드(GET, POST 등) 정보를 담고 있음.
MultipartFile: 파일 업로드 요청 시 사용되는 파일 데이터


** HttpEntity
HTTP 요청/응답의 본문(body)과 헤더(headers)를 함께 포함하는 객체.
요청 파라미터(@RequestParam)과는 전혀 관련 없음.
@RequestParam은 get에 query String이나 post 방식으로 form 데이터 전송하는 방식에 사용.
응답에 HttpEntity를 사용하는 경우, view 조회하지 않음. 그냥 바로 http 응답 메시지 보냄.
요청, 응답 각각에 대응하는 RequestEntity, ResponseEntity가 있음. 


** @RequestBody



** HTTP 응답 - 정적 리소스, 뷰 템플릿
스프링(서버)에서 응답 데이터를 만드는 방법은 크게 3가지

1. 정적 리소스
스프링 부트는 클래스패스의 다음 디렉토리들에 있는 정적 리소스를 제공한다.
/static, /public, /resources, /META-INF/resources

ex) 다음 경로에 파일이 들어있으면  src/main/resources/static/basic/hello-form.html ->웹 브라우저에서 다음과 같이 실행하면 된다. http://localhost:8080/basic/hello-form.html

2. 뷰 템플릿 사용
스프링 부트는 기본 뷰 템플릿 경로를 제공 :  src/main/resources/templates
예) 웹 브라우저에 동적인 HTML을 제공할 때는 뷰 템플릿을 사용한다.

3. HTTP 메시지 사용
HTTP API를 제공하는 경우에는 HTML이 아니라 데이터를 전달해야 하므로, HTTP 메시지 바디에 
JSON 같은 형식으로 데이터를 실어 보낸다.



** 글로벌 오류와 필드별 오류의 차이:
필드별 오류: 특정 입력 필드에서 발생하는 오류 (예: 이름을 입력하지 않았을 때 itemName에 대한 오류).
글로벌 오류: 특정 필드가 아닌, 폼 전체의 비즈니스 규칙이나 논리적 제약을 위반했을 때 발생하는 오류 (예: "가격 * 수량의 총합은 10,000원 이상이어야 합니다.").


**BindingResult**는 Spring MVC에서 폼 데이터의 바인딩 및 검증 결과를 저장하고 처리하는 객체입니다.
바인딩 오류나 검증 오류가 발생할 경우 이를 BindingResult에 저장하고, 이를 통해 적절한 오류 메시지를 사용자에게 전달할 수 있습니다.
검증 오류 발생 시 처리 로직을 쉽게 구현할 수 있도록 도와주며, 특정 필드 오류와 글로벌 오류를 관리할 수 있습니다.
BindingResult는 검증해야할 target인 @ModelAttribute 객체 바로 뒤에 위치해야 합니다. 이 위치는 매우 중요합니다. 잘못된 위치에 있으면 바인딩 오류가 발생해도 BindingResult가 오류 정보를 받지 못하고, 예외로 처리될 수 있습니다.


**ValidationUtils.rejectIfEmpty()**는 기본적인 필드 비어 있음 검증을 간단하게 처리하는 유틸리티 메서드입니다.
rejectIfEmpty()는 필드 단위의 검증을 위한 메서드입니다. 특정 필드가 비어있는 경우에만 동작하며, 필드 이름을 지정해야 합니다. 따라서 reject()로 대체할 수 없습니다.
예를 들어, "itemName"이라는 필드가 빈 값인지 확인하고, 비어있으면 해당 필드에 대한 에러를 추가합니다.
**bindingResult.rejectValue()**는 더 세밀한 검증 로직을 수동으로 구현할 수 있으며, StringUtils.hasText() 등을 사용해 공백 처리 등 더 복잡한 검증을 적용할 수 있습니다.
둘 다 검증의 결과는 동일할 수 있지만, 검증 방식의 복잡도에 따라 선택하는 것이 좋습니다.


**@InitBinder
Spring MVC에서 제공하는 어노테이션으로, WebDataBinder를 초기화할 때 사용하는 메서드에 적용됩니다. 이 어노테이션을 사용하면, 특정 컨트롤러 내에서 데이터 바인딩이나 검증 로직을 설정할 수 있습니다.
주로 Validator를 등록하거나, 바인딩 관련 설정을 할 때 사용합니다.

동작 원리:
WebDataBinder는 Spring MVC에서 요청 파라미터를 컨트롤러 메서드의 객체에 바인딩하는 과정에서 사용됩니다. @ModelAttribute로 받은 객체는 WebDataBinder를 통해 파라미터를 객체의 필드에 매핑하게 됩니다.
@InitBinder 메서드는 해당 컨트롤러에 요청이 들어오면, 폼 데이터 바인딩 및 검증을 수행하기 전에 WebDataBinder를 설정할 수 있도록 호출됩니다.
@InitBinder로 선언된 메서드는 해당 컨트롤러에서 실행되는 모든 요청에 대해 호출됩니다. 즉, 데이터를 바인딩할 때마다 호출되어, 바인딩이나 검증과 관련된 설정을 미리 처리합니다.
Validator 등록: WebDataBinder에 Validator를 추가하면, 바인딩된 객체에 대해 자동으로 검증이 수행됩니다.



**Bean Validation
객체 타입 검사 (supports와 유사): Spring MVC는 @Validated나 @Valid가 적용된 객체를 발견하면, 먼저 그 객체에 대해 검증이 가능한지 판단합니다. 이 과정은 기본적으로 대상 객체가 JSR-303 Bean Validation을 지원하는지를 확인합니다. 즉, 해당 객체가 검증 어노테이션(예: @NotNull, @NotBlank, @Min 등)을 포함하고 있는지 확인하는 과정입니다.

검증 수행 (validate와 유사): 검증이 가능한 객체라면, Bean Validation 프레임워크가 대상 객체의 각 필드에 설정된 어노테이션을 기준으로 자동으로 검증을 수행합니다. 이 검증 과정에서 오류가 발생하면 그 결과는 **BindingResult**에 저장됩니다.

Bean Validation의 순서
Spring MVC는 @Validated나 @Valid가 붙은 객체를 확인합니다.
해당 객체에 대해 Bean Validation을 적용할 수 있는지 (supports와 유사한 원리) 확인합니다.
검증 대상이라면 각 필드에 설정된 어노테이션에 따라 검증을 수행합니다 (validate와 유사한 과정).
검증 결과는 BindingResult에 담기며, 이후에 이를 통해 오류를 처리할 수 있습니다.
차이점
Spring의 Validator 인터페이스는 supports와 validate 메서드를 수동으로 구현해야 하지만, Bean Validation은 기본 제공되는 검증 규칙에 따라 자동으로 검증이 이루어집니다.
Bean Validation에서는 별도의 supports 메서드를 호출하지 않고, 어노테이션과 JSR-303 규칙에 따라 자동으로 대상 객체를 판단합니다.



**@ScriptAssert**

@ScriptAssert(
    lang = "javascript",
    script = "_this.price * _this.quantity >= 10000",
    message = "{item.totalPriceMin}"  // 명시적으로 메시지 키를 설정

 Hibernate Validator에서 제공하는 어노테이션으로, 자바 객체의 복합적인 조건을 스크립트를 이용해 검증하는 데 사용됩니다. 
클래스 레벨에서만 사용할 수 있습니다. 이는 필드 간의 상호작용이나 객체 전반의 상태를 검증하기 위한 어노테이션이기 때문입니다.
단일 필드 검증에는 @NotNull, @Size 등 필드 레벨 어노테이션을 사용하며, @ScriptAssert는 복합적인 필드 관계를 처리할 때 적합합니다.

검증 시점: @ScriptAssert는 객체 단위로 검증할 때 실행됩니다. 객체가 생성되거나 업데이트될 때 Bean Validation이 이 어노테이션을 감지하고 스크립트를 실행합니다.
스크립트 실행: 지정한 스크립트 언어로 작성된 검증 논리가 JVM 내에서 스크립트 엔진을 통해 실행됩니다. 자바 객체의 필드 값들이 스크립트 내에서 참조되며, 스크립트 결과가 true 또는 false로 반환됩니다.

결과 처리: 스크립트의 결과가 false이면 검증 실패로 처리되며, 설정된 오류 메시지가 BindingResult 또는 ConstraintViolation에 추가됩니다.

@ScriptAssert는 클래스 레벨에서 사용되기 때문에, 필드 레벨의 어노테이션처럼 메시지 키를 자동으로 유추하지 않습니다.
따라서, 메시지 키를 명시적으로 지정해야 Bean Validation이 해당 키에 맞는 메시지를 찾아 오류 메시지를 출력할 수 있습니다.



**HttpMessageConverter**
HTTP 요청 바디의 데이터를 Java 객체로 변환하고, Java 객체를 HTTP 응답으로 변환하는 역할을 합니다.

@Valid, @Validated는 HttpMessageConverter ( @RequestBody)에도 적용할 수 있다.

참고
@ModelAttribute는 HTTP 요청 파라미터(URL 쿼리 스트링, POST Form)를 다룰 때 사용한다.
@RequestBody는 HTTP Body의 데이터를 객체로 변환할 때 사용한다. 주로 API JSON 요청을 다룰 때 사용 
한다.


**바인딩(Binding)**은 연결을 의미합니다. 예를 들어, 폼 데이터와 모델 객체 필드를 연결하거나, 데이터가 모델에서 뷰로 전달되는 연결을 설명합니다.
**매핑(Mapping)**은 변환을 의미합니다. HTTP 요청 데이터를 Java 객체로 변환하거나, 데이터 구조 간의 변환을 설명할 때 사용됩니다.
바인딩은 데이터 간의 실시간 연결에 초점을 맞추고, 매핑은 데이터 구조나 형식을 변환하는 데 중점을 둡니다.
