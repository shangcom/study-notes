예외는 주로 개발자가 문제를 인식하고 해결하기 위한 도구입니다. 사용자는 예외의 세부적인 내용이나 스택 트레이스를 보지 않아야 하며, 예외가 발생했을 때 적절한 안내 메시지나 대체 동작을 통해 사용자 경험을 보호하는 것이 중요합니다.


런타임 중에 발생할 수 있는 예외를 미리 컴파일 단계에서 해결하도록 유도하는 것이 바로 런타임 예외를 체크 예외로 바꾸는 핵심 개념입니다.
런타임 예외를 체크 예외로 바꾼다는 것은 예외 처리의 강제성을 도입하여 개발자가 그 예외를 미리 처리할 수 있도록 유도하는 것입니다. 
런타임 예외는 앱이 실행 중에 예상치 못하게 발생하는 상황을 처리하지 않았을 때 나타나는 문제들입니다. 컴파일러는 이런 예외를 미리 체크하지 않기 때문에,
프로그램이 실행될 때야 비로소 해당 예외를 마주하게 됩니다.
그러나 만약 런타임 예외를 체크 예외로 바꾸면, 컴파일 단계에서 해당 예외가 발생할 가능성을 미리 인식하고, 예외 처리를 강제하게 됩니다.
즉, 컴파일러가 "이 부분에서 예외가 발생할 수 있으니, 미리 try-catch로 처리하거나 throws로 던져라"라고 요구하는 것이죠.
따라서, 컴파일 시점에서 문제를 해결하게 하여 실행 중 예외가 발생하는 것을 방지하는 방식으로 코드를 작성하는 것이죠.

체크 예외는 컴파일러가 미리 처리하도록 강제하는 예외일 뿐, 실제로 발생하는 시점은 런타임입니다.
예를 들어, **SQLException**이나 **IOException**은 런타임 중에 발생할 수 있으며, 이 예외가 발생하면 적절한 처리가 이루어지지 않으면 상위 메서드로 계속 전파될 수 있습니다.

**체크 예외
 컴파일러에 의해 예외 처리가 강제되는 예외.
체크 예외가 외부 시스템과의 상호작용에서 자주 발생한다는 설명은 체크 예외가 주로 등장하는 맥락을 설명한 것입니다. 
자바에서 파일 입출력, 네트워크, 데이터베이스와 같은 외부 시스템과 상호작용할 때 주로 체크 예외가 발생하는 이유는, 외부 시스템의 상태는 애플리케이션이 제어할 수 없는
상황이 많기 때문에 예외 처리를 강제함으로써 이러한 문제를 대비하려는 의도 때문입니다.
따라서, 체크 예외의 본질적 정의는 컴파일러가 예외 처리를 강제하는 예외이고, 외부 시스템과의 상호작용은 체크 예외가 자주 발생하는 대표적인 상황으로 이해하면 됩니다.

 + 비즈니스 로직에서 예외 처리가 필수적인 상황:
중요한 비즈니스 로직에서 예외가 발생했을 때, 이를 체크 예외로 처리하여 반드시 예외 처리를 강제함으로써 개발자가 실수로 예외를 놓치는 것을 방지할 수 있습니다.
예를 들어, 계좌 이체 실패, 포인트 부족, 로그인 실패 등의 비즈니스 로직에서는 예외를 명시적으로 처리하도록 요구할 수 있습니다.


**체크 예외가 주로 외부 환경에 의존하는 작업에서 발생하는 이유?
자바의 안전성과 예외 처리에 대한 강제성을 높이기 위한 설계 철학에 기반합니다. 자바에서는 왜 이런 특정 케이스를 체크 예외로 분류했는지 그 이유를 설명하겠습니다.

1. 외부 환경의 불확실성 때문
파일 입출력, 데이터베이스 연결, 네트워크 통신과 같은 외부 환경과의 상호작용은 애플리케이션 내부에서 제어할 수 없는 요소들이 많습니다. 이러한 작업은 외부 환경의 상태에 따라 성공할 수도, 실패할 수도 있습니다.
예를 들어:
파일 입출력에서는 파일이 없거나 읽기 권한이 없을 수 있습니다.
데이터베이스 연결은 네트워크가 불안정하거나 데이터베이스 서버가 다운되어 있을 수 있습니다.
네트워크 통신도 인터넷 연결이 끊어질 수 있습니다.
외부 환경의 상태를 개발자가 정확히 예측할 수 없기 때문에, 자바는 이러한 외부 환경과 관련된 예외를 체크 예외로 분류하여, 예외 처리를 강제하고 예외적인 상황에 대비하도록 하고 있습니다.

2. 복구 가능한 상황에 대한 대비
체크 예외는 복구 가능한 상황에서 발생할 수 있는 예외로 분류됩니다. 외부 시스템과의 상호작용에서 발생하는 오류는 어떤 방식으로든 복구할 여지가 있는 경우가 많습니다.
예를 들어:
파일을 읽을 수 없는 경우, 다른 파일을 시도하거나, 사용자에게 파일을 선택하도록 요청할 수 있습니다.
네트워크 연결이 끊긴 경우, 재시도를 하거나 다른 서버로 접속을 시도할 수 있습니다.
체크 예외를 통해 복구 가능한 오류에 대해 반드시 예외 처리를 강제함으로써, 프로그램이 예외적인 상황에서도 더 안정적으로 동작할 수 있도록 합니다.

3. 컴파일 시점에 예외 처리의 의무를 부여하기 위함
자바는 컴파일 시점에서 예외 처리를 강제함으로써, 코드가 잠재적인 예외 상황을 놓치지 않고 처리하도록 합니다. 이렇게 함으로써, 개발자가 외부 시스템과 상호작용할 때 발생할 수 있는 오류를 미리 대비할 수 있습니다.
반대로, 프로그래밍 오류나 논리적 오류(예: NullPointerException 등)와 같은 경우는 주로 개발자가 코드 작성 시 방지할 수 있기 때문에, 이런 오류는 언체크 예외로 남겨두어도 괜찮다고 간주합니다.

4. 체크 예외를 강제하여 코드 품질을 높이기 위함
외부 환경과 상호작용하는 코드는 예외적인 상황이 더 자주 발생할 수 있으며, 이를 미리 처리하지 않으면 코드 품질이 낮아질 수 있습니다.
체크 예외는 이러한 외부 의존적인 작업에서 발생할 수 있는 잠재적인 문제를 반드시 처리하도록 강제함으로써, 더 안전하고 신뢰할 수 있는 코드를 작성하도록 유도합니다.

결론
체크 예외가 외부 환경에 의존하는 작업에서 주로 발생하는 이유는, 이러한 작업들이 애플리케이션 내부에서 제어할 수 없는 불확실성을 갖고 있기 때문입니다. 자바는 이런 불확실성에 대비하기 위해 예외 처리를 강제하여, 예외적인 상황에서도 안정적인 프로그램 동작을 보장하려는 목적을 가지고 있습니다.

그냥 특정 케이스로 분류하지 않고, 체크 예외로 강제하는 설계 철학은 코드가 예외 상황을 빠뜨리지 않고 처리할 수 있도록 돕기 위한 것입니다. 이를 통해 개발자는 외부 환경과의 상호작용에서 발생할 수 있는 오류에 대해 반드시 대비할 수 있게 됩니다.